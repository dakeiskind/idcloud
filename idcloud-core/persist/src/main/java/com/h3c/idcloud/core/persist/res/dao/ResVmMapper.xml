<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.h3c.idcloud.core.persist.res.dao.ResVmMapper">
    <resultMap id="BaseResultMap" type="com.h3c.idcloud.core.pojo.dto.res.ResVm">
        <id column="RES_VM_SID" property="resVmSid" jdbcType="VARCHAR"/>
        <result column="VM_NAME" property="vmName" jdbcType="VARCHAR"/>
        <result column="CPU_CORES" property="cpuCores" jdbcType="INTEGER"/>
        <result column="MEMORY_SIZE" property="memorySize" jdbcType="BIGINT"/>
        <result column="MEMORY_SIZE_GB" property="memorySizeGb" jdbcType="VARCHAR"/>
        <result column="VM_CPU_GHZ" property="vmCpuGhz" jdbcType="DECIMAL"/>
        <result column="USE_CPU_GHZ" property="useCpuGhz" jdbcType="DECIMAL"/>
        <result column="USE_MEMORY_SIZE" property="useMemorySize" jdbcType="BIGINT"/>
        <result column="OS_VERSION" property="osVersion" jdbcType="VARCHAR"/>
        <result column="OS_VERSION_NAME" property="osVersionName" jdbcType="VARCHAR"/>
        <result column="OS_NAME" property="osName" jdbcType="VARCHAR"/>
        <result column="ALLOCATE_RES_HOST_SID" property="allocateResHostSid" jdbcType="VARCHAR"/>
        <result column="ALLOCATE_RES_STORAGE_SID" property="allocateResStorageSid" jdbcType="VARCHAR"/>
        <result column="OWNER_HOST" property="ownerHost" jdbcType="VARCHAR"/>
        <result column="MANAGEMENT_ACCOUNT" property="managementAccount" jdbcType="VARCHAR"/>
        <result column="MANAGEMENT_PASSWORD" property="managementPassword" jdbcType="VARCHAR"/>
        <result column="SECRET_KEY" property="secretKey" jdbcType="VARCHAR"/>
        <result column="UUID" property="uuid" jdbcType="VARCHAR"/>
        <result column="ZONE" property="zone" jdbcType="VARCHAR"/>
        <result column="MONITOR_NODE_ID" property="monitorNodeId" jdbcType="VARCHAR"/>
        <result column="STATUS" property="status" jdbcType="VARCHAR"/>
        <result column="STATUS_NAME" property="statusName" jdbcType="VARCHAR"/>
        <result column="VM_IP" property="vmIp" jdbcType="VARCHAR"/>
        <result column="EXT_IP" property="extIp" jdbcType="VARCHAR"/>
        <result column="OWNER_ID" property="ownerId" jdbcType="VARCHAR"/>
        <result column="CREATED_BY" property="createdBy" jdbcType="VARCHAR"/>
        <result column="CREATED_DT" property="createdDt" jdbcType="TIMESTAMP"/>
        <result column="UPDATED_BY" property="updatedBy" jdbcType="VARCHAR"/>
        <result column="UPDATED_DT" property="updatedDt" jdbcType="TIMESTAMP"/>
        <result column="VERSION" property="version" jdbcType="BIGINT"/>

        <result column="STA_TOTAL_VM" property="staTotalVm" jdbcType="INTEGER"/>
        <result column="STA_NORMAL_VM" property="staNormalVm" jdbcType="INTEGER"/>
        <result column="STA_DOWN_VM" property="staDownVm" jdbcType="INTEGER"/>
        <result column="STA_PAUSE_VM" property="staPauseVm" jdbcType="INTEGER"/>
        <result column="STA_OTHERS_VM" property="staOthersVm" jdbcType="INTEGER"/>
        <result column="PROVISION_SPACE" property="provisionStorage" jdbcType="BIGINT"/>
        <result column="USE_STORE_SIZE" property="useStoreSize" jdbcType="BIGINT"/>

        <result column="CPU_USE_RATE" property="cpuUseRate" jdbcType="VARCHAR"/>
        <result column="MEMORY_USE_RATE" property="memoryUseRate" jdbcType="VARCHAR"/>

        <result column="ALLOT_STORAGE_VOLUME" property="allotStorageVolume" jdbcType="INTEGER"/>

        <result column="POWER_CPU_MAX_UNITS" property="powerCpuMaxUnits" jdbcType="BIGINT"/>
        <result column="POWER_CPU_MIN_UNITS" property="powerCpuMinUnits" jdbcType="BIGINT"/>
        <result column="POWER_CPU_USED_UNITS" property="powerCpuUsedUnits" jdbcType="BIGINT"/>
        <result column="RES_VIOS_ID" property="resViosId" jdbcType="VARCHAR"/>
        <result column="PAR_ID" property="parId" jdbcType="VARCHAR"/>
        <result column="PAR_PROFILE" property="parProfile" jdbcType="VARCHAR"/>
        <result column="PAR_TYPE" property="parType" jdbcType="INTEGER"/>
        <result column="CPU_CORES_MAX" property="cpuCoresMax" jdbcType="INTEGER"/>
        <result column="CPU_CORES_MIN" property="cpuCoresMin" jdbcType="INTEGER"/>

        <result column="MEMORY_MIN" property="memoryMin" jdbcType="INTEGER"/>
        <result column="MEMORY_MAX" property="memoryMax" jdbcType="INTEGER"/>

        <result column="MGT_OBJ_SID" property="mgtObjSid" jdbcType="BIGINT"/>
        <result column="MGT_OBJ_NAME" property="mgtObjName" jdbcType="VARCHAR"/>

        <result column="OS_TYPE" property="osType" jdbcType="VARCHAR"/>

    </resultMap>
    <sql id="Example_Where_Clause">
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.resVmSid != null">
                and A.RES_VM_SID = #{condition.resVmSid}
            </if>
            <if test="condition.zone != null">
                and A.ZONE = #{condition.zone}
            </if>
            <if test="condition.vmName != null">
                and A.VM_NAME = #{condition.vmName}
            </if>
            <if test="condition.vmNameLike != null">
                and A.VM_NAME like concat('%', #{condition.vmNameLike},'%')
            </if>
            <if test="condition.cpuCores != null">
                and A.CPU_CORES = #{condition.cpuCores}
            </if>
            <if test="condition.memorySize != null">
                and A.MEMORY_SIZE = #{condition.memorySize}
            </if>
            <if test="condition.osVersion != null">
                and A.OS_VERSION = #{condition.osVersion}
            </if>
            <if test="condition.allocateResHostSid != null">
                and A.ALLOCATE_RES_HOST_SID = #{condition.allocateResHostSid}
            </if>
            <if test="condition.resHostSids != null">
                and A.ALLOCATE_RES_HOST_SID in (${condition.resHostSids})
            </if>
            <if test="condition.managementAccount != null">
                and A.MANAGEMENT_ACCOUNT = #{condition.managementAccount}
            </if>
            <if test="condition.managementPassword != null">
                and A.MANAGEMENT_PASSWORD = #{condition.managementPassword}
            </if>
            <if test="condition.secretKey != null">
                and A.SECRET_KEY = #{condition.secretKey}
            </if>
            <if test="condition.uuid != null">
                and A.UUID = #{condition.uuid}
            </if>
            <if test="condition.monitorNodeId != null">
                and A.MONITOR_NODE_ID = #{condition.monitorNodeId}
            </if>
            <if test="condition.status != null">
                and A.STATUS = #{condition.status}
            </if>
            <if test="condition.statusNotIn != null">
                and A.STATUS NOT IN (${condition.statusNotIn})
            </if>

            <if test="condition.createdBy != null">
                and A.CREATED_BY = #{condition.createdBy}
            </if>
            <if test="condition.createdDt != null">
                and A.CREATED_DT = #{condition.createdDt}
            </if>
            <if test="condition.updatedBy != null">
                and A.UPDATED_BY = #{condition.updatedBy}
            </if>
            <if test="condition.updatedDt != null">
                and A.UPDATED_DT = #{condition.updatedDt}
            </if>
            <if test="condition.version != null">
                and A.VERSION = #{condition.version}
            </if>
            <if test="condition.useStoreSize != null">
                and A.USE_STORE_SIZE = #{condition.useStoreSize}
            </if>
            <if test="condition.provisionStorage != null">
                and A.PROVISION_SPACE = #{condition.provisionStorage}
            </if>
            <if test="condition.powerCpuMaxUnits != null">
                and A.POWER_CPU_MAX_UNITS = #{condition.powerCpuMaxUnits}
            </if>
            <if test="condition.powerCpuMinUnits != null">
                and A.POWER_CPU_MIN_UNITS = #{condition.powerCpuMinUnits}
            </if>
            <if test="condition.powerCpuUsedUnits != null">
                and A.POWER_CPU_USED_UNITS = #{condition.powerCpuUsedUnits}
            </if>
            <if test="condition.resViosId != null">
                and A.RES_VIOS_ID = #{condition.resViosId}
            </if>
            <if test="condition.vmIpLike != null">
                and E.IP_ADDRESS like concat('%', #{condition.vmIpLike},'%')
            </if>
            <if test="condition.parId != null">
                and A.PAR_ID = #{condition.parId}
            </if>
            <if test="condition.parType != null">
                and A.PAR_TYPE = #{condition.parType}
            </if>
            <if test="condition.mgtObjSid != null">
                and SM.MGT_OBJ_SID = #{condition.mgtObjSid}
            </if>
            <if test="condition.instStatusParams != null">
                and SI.STATUS in (${condition.instStatusParams})
            </if>
            <if test="condition.ownerId != null">
                and A.OWNER_ID = #{condition.ownerId}
            </if>
            <!--        <if test="condition.resTopologySid != null" > -->
            <!-- 	   	 and FIND_IN_SET(A.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{condition.resTopologySid})) -->
            <!-- 	   </if> -->

            <!--        <if test="condition.resBizSid != null" > -->
            <!--          and FIND_IN_SET(BIZ.BIZ_SID,getResBizChildList(#{condition.resBizSid})) -->
            <!--        </if> -->
        </trim>
    </sql>
    <sql id="Base_Column_List">
        A.RES_VM_SID, A.VM_NAME, A.CPU_CORES, A.MEMORY_SIZE, A.ALLOCATE_RES_HOST_SID, A.ALLOCATE_RES_STORAGE_SID,
        A.MANAGEMENT_ACCOUNT, A.ZONE,
        A.MANAGEMENT_PASSWORD, A.OS_NAME, A.OS_VERSION,A.SECRET_KEY, A.UUID, A.MONITOR_NODE_ID, A.STATUS, A.CREATED_BY,
        A.CREATED_DT, A.UPDATED_BY,
        A.UPDATED_DT, A.OWNER_ID,
        A.VERSION,A.USE_MEMORY_SIZE,A.USE_CPU_GHZ,A.PROVISION_SPACE,A.USE_STORE_SIZE,A.POWER_CPU_MAX_UNITS,A.POWER_CPU_MIN_UNITS,
        A.POWER_CPU_USED_UNITS ,A.RES_VIOS_ID ,A.PAR_ID
        ,A.PAR_PROFILE,A.PAR_TYPE,A.CPU_CORES_MAX,A.CPU_CORES_MIN,A.MEMORY_MIN,A.MEMORY_MAX
    </sql>
    <select id="selectByParams" resultMap="BaseResultMap" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        <if test="distinct">
            distinct
        </if>
        <if test="condition.resTopologySid != null">
            B.HOST_NAME as OWNER_HOST,
        </if>
        ROUND((A.MEMORY_SIZE/1024) , 2) as MEMORY_SIZE_GB,
        CONCAT(IFNULL(ROUND(((A.USE_CPU_GHZ/1024)/(A.CPU_CORES*RH.CPU_GHZ))*100 , 2),'0.00'),'%') as CPU_USE_RATE,
        CONCAT(IFNULL(ROUND((A.USE_MEMORY_SIZE/A.MEMORY_SIZE)*100 , 2),'0.00'),'%') as MEMORY_USE_RATE,
        GROUP_CONCAT(distinct E.IP_ADDRESS ORDER BY E.IP_ADDRESS ASC) AS VM_IP,
        C.CODE_DISPLAY as STATUS_NAME,
        IFNULL(F.CODE_DISPLAY , A.OS_VERSION ) as OS_VERSION_NAME,
        RH.CPU_GHZ as VM_CPU_GHZ,
        VD.ALLOCATE_DISK_SIZE as ALLOT_STORAGE_VOLUME,
        SM.MGT_OBJ_SID AS MGT_OBJ_SID,SM.`NAME` AS MGT_OBJ_NAME,
        F.PARENT_CODE_VALUE AS OS_TYPE,
        <include refid="Base_Column_List"/>
        from res_vm A
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='RES_VM_STATUS')
        <if test="condition.resTopologySid != null">
            INNER JOIN (
            select
            H.RES_HOST_SID,
            H.HOST_NAME
            from res_host H
            where FIND_IN_SET(H.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{condition.resTopologySid}))
            ) B ON (B.RES_HOST_SID = A.ALLOCATE_RES_HOST_SID)
        </if>
        LEFT JOIN res_vm_network E ON(A.RES_VM_SID=E.RES_VM_SID)
        LEFT JOIN sys_m_code F on (A.OS_VERSION = F.CODE_VALUE AND F.CODE_CATEGORY='OS_VERSION')
        LEFT JOIN res_host RH on (RH.RES_HOST_SID = A.ALLOCATE_RES_HOST_SID)
        LEFT JOIN (
        SELECT
        VD.RES_VM_SID,
        sum(VD.ALLOCATE_DISK_SIZE) as ALLOCATE_DISK_SIZE
        FROM
        res_vd VD
        GROUP BY VD.RES_VM_SID
        )VD on (A.RES_VM_SID = VD.RES_VM_SID)

        LEFT JOIN service_inst_res SIR ON (SIR.RES_ID = A.RES_VM_SID)
        LEFT JOIN service_instance SI ON (SI.INSTANCE_SID = SIR.INSTANCE_SID)
        LEFT JOIN sys_m_mgt_obj SM ON (SM.MGT_OBJ_SID = SI.MGT_OBJ_SID)

        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_VM_SID
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <select id="selectByPowerVe" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        A.*
        from res_vm A
        LEFT JOIN res_host B ON (
        A.ALLOCATE_RES_HOST_SID = B.RES_HOST_SID
        )
        WHERE
        B.PARENT_TOPOLOGY_SID =#{resVeSid}
    </select>

    <select id="selectByUuidInVmVios" parameterType="string" resultType="string">
        SELECT DISTINCT a.resVmSid FROM (
        SELECT RES_VM_SID AS resVmSid FROM res_vm WHERE UUID = #{uuid}
        UNION ALL
        SELECT RES_VIOS_SID AS resVmSid FROM res_vios WHERE UUID = #{uuid}
        ) a
    </select>

    <select id="selectBaseInfoByUuid" parameterType="java.lang.String" resultType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
          <include refid="Base_Column_List"/>
        FROM res_vm
        WHERE UUID = #{uuid}
    </select>

    <select id="selectUnnanotubeVmByHost" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT A.*
        FROM `res_vm` A
        LEFT JOIN service_inst_res B ON (A.RES_VM_SID = B.RES_ID)
        WHERE B.INSTANCE_SID IS NULL
        <if test="condition.allocateResHostSid != null">
            and A.ALLOCATE_RES_HOST_SID = #{condition.allocateResHostSid}
        </if>
        <if test="condition.osVersion != null">
            and A.OS_VERSION = #{condition.osVersion}
        </if>
    </select>

    <select id="selectByResHostSid" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        COUNT(A.RES_VM_SID) as STA_TOTAL_VM,
        sum(IF(A.`STATUS` = 'normal',1,0)) as STA_NORMAL_VM,
        sum(IF(A.`STATUS` = 'poweredOff',1,0)) as STA_DOWN_VM,
        sum(IF(A.`STATUS` = 'suspended',1,0)) as STA_PAUSE_VM,
        sum(IF(A.`STATUS` != 'normal' and A.`STATUS` != 'poweredOff' and A.`STATUS` != 'suspended',1,0)) as
        STA_OTHERS_VM
        from res_vm A

        where A.ALLOCATE_RES_HOST_SID = #{allocateResHostSid}
    </select>

    <select id="statisticalTopologyOfVm" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        COUNT(A.RES_VM_SID) as STA_TOTAL_VM,
        sum(IF(A.`STATUS` = 'normal',1,0)) as STA_NORMAL_VM,
        sum(IF(A.`STATUS` = 'poweredOff',1,0)) as STA_DOWN_VM,
        sum(IF(A.`STATUS` = 'suspended',1,0)) as STA_PAUSE_VM,
        sum(IF(A.`STATUS` != 'normal' and A.`STATUS` != 'poweredOff' and A.`STATUS` != 'suspended',1,0)) as
        STA_OTHERS_VM
        from res_vm A
        INNER JOIN (
        select
        H.RES_HOST_SID
        from res_host H
        where FIND_IN_SET(H.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{condition.resTopologySid}))
        ) B ON (B.RES_HOST_SID = A.ALLOCATE_RES_HOST_SID)

        WHERE A.`STATUS` != 'deleted'
    </select>

    <select id="statisticalComputePoolOfVm" resultMap="BaseResultMap" parameterType="java.lang.String">

        SELECT
        COUNT(A.RES_VM_SID) as STA_TOTAL_VM,
        sum(IF(A.`STATUS` = 'normal',1,0)) as STA_NORMAL_VM,
        sum(IF(A.`STATUS` = 'poweredOff',1,0)) as STA_DOWN_VM,
        sum(IF(A.`STATUS` = 'suspended',1,0)) as STA_PAUSE_VM,
        sum(IF(A.`STATUS` != 'normal' and A.`STATUS` != 'poweredOff' and A.`STATUS` != 'suspended',1,0)) as
        STA_OTHERS_VM,
        sum(A.CPU_CORES) as CPU_CORES,
        ROUND((sum(A.MEMORY_SIZE)/1024) , 2) as MEMORY_SIZE
        FROM
        res_vm A
        INNER JOIN (
        SELECT
        A.RES_HOST_SID
        FROM
        res_host A
        WHERE A.RES_POOL_SID = #{resPoolSid}
        ) B ON (A.ALLOCATE_RES_HOST_SID = B.RES_HOST_SID)

        WHERE A.`STATUS` != 'deleted'
    </select>

    <select id="selectVmResSum" resultMap="BaseResultMap" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select sum(A.CPU_CORES) as CPU_CORES,sum(A.MEMORY_SIZE) as MEMORY_SIZE
        from res_vm A
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <select id="selectVmResSumByOsType" resultMap="BaseResultMap" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT SUM(A.CPU_CORES) as CPU_CORES,
        ROUND(SUM(A.MEMORY_SIZE)/1024,2) as MEMORY_SIZE
        FROM res_vm A
        WHERE A.ALLOCATE_RES_HOST_SID in (
        SELECT A.RES_HOST_SID
        FROM `res_host` A
        LEFT JOIN res_topology B ON (A.PARENT_TOPOLOGY_SID = B.RES_TOPOLOGY_SID)
        LEFT JOIN res_ve VE1 on (B.RES_TOPOLOGY_SID = VE1.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology J on (B.PARENT_TOPOLOGY_SID = J.RES_TOPOLOGY_SID)
        LEFT JOIN res_ve VE2 on (J.RES_TOPOLOGY_SID = VE2.RES_TOPOLOGY_SID)
        WHERE VE2.VIRTUAL_PLATFORM_TYPE = "VMware" OR VE1.VIRTUAL_PLATFORM_TYPE = "VMware"
        )
    </select>

    <select id="selectBaseInfoByParam" resultMap="BaseResultMap" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        <include refid="Base_Column_List"/>
        , GROUP_CONCAT(DISTINCT B.IP_ADDRESS ORDER BY B.IP_ADDRESS) AS VM_IP
        , D.IP_ADDRESS as EXT_IP
        FROM res_vm A
        LEFT JOIN res_vm_network B ON A.RES_VM_SID = B.RES_VM_SID
        LEFT JOIN res_floating_ip C ON A.RES_VM_SID = C.MAPPING_VM_SID
        LEFT JOIN res_ext_ip D on C.RES_IP_SID = D.RES_SID
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_VM_SID
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        ,GROUP_CONCAT(E.IP_ADDRESS) AS VM_IP
        ,C.CODE_DISPLAY as STATUS_NAME
        ,D.HOST_NAME as OWNER_HOST
        ,D.CPU_GHZ as VM_CPU_GHZ
        ,IFNULL(F.CODE_DISPLAY , A.OS_VERSION ) as OS_VERSION_NAME
        ,F.PARENT_CODE_VALUE AS OS_TYPE
        from res_vm A
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='RES_VM_STATUS')
        left join res_host D ON (A.ALLOCATE_RES_HOST_SID = D.RES_HOST_SID)
        LEFT JOIN res_vm_network E ON(A.RES_VM_SID=E.RES_VM_SID)
        LEFT JOIN sys_m_code F on (A.OS_VERSION = F.CODE_VALUE AND F.CODE_CATEGORY='OS_VERSION')
        where A.RES_VM_SID = #{resVmSid}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from res_vm
        where RES_VM_SID = #{resVmSid}
    </delete>
    <delete id="deleteByParams" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        delete from res_vm
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResVm">
        insert into res_vm (RES_VM_SID, VM_NAME, CPU_CORES, MEMORY_SIZE, ALLOCATE_RES_HOST_SID,
        MANAGEMENT_ACCOUNT, MANAGEMENT_PASSWORD, OS_VERSION,SECRET_KEY, UUID, ZONE, STATUS, MONITOR_NODE_ID,
        CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT,OWNER_ID,
        VERSION,PROVISION_SPACE,USE_STORE_SIZE,POWER_CPU_MAX_UNITS,POWER_CPU_MIN_UNITS,
        POWER_CPU_USED_UNITS ,RES_VIOS_ID,PAR_ID,PAR_PROFILE,PAR_TYPE,CPU_CORES_MAX,CPU_CORES_MIN)
        values (#{resVmSid}, #{vmName}, #{cpuCores}, #{memorySize}, #{allocateResHostSid},
        #{managementAccount}, #{managementPassword}, #{osVersion}, #{secretKey}, #{uuid}, #{zone}, #{status}, #{monitorNodeId},
        #{createdBy}, #{createdDt}, #{updatedBy}, #{updatedDt}, #{ownerId}, #{version},#{provisionStorage},#{useStoreSize},
        #{powerCpuMaxUnits},#{powerCpuMinUnits},#{powerCpuUsedUnits},#{resViosId},#{parId},#{parProfile},#{parType},#{cpuCoresMax},#{cpuCoresMin})
    </insert>
    <insert id="insertSelective" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResVm">
        <selectKey resultType="java.lang.String" keyProperty="resVmSid" order="BEFORE">
            SELECT UUID()
        </selectKey>
        insert into res_vm
        <trim prefix="(" suffix=")" suffixOverrides=",">
            RES_VM_SID,
            <if test="vmName != null">
                VM_NAME,
            </if>
            <if test="cpuCores != null">
                CPU_CORES,
            </if>
            <if test="memorySize != null">
                MEMORY_SIZE,
            </if>
            <if test="memoryMin != null">
                MEMORY_MIN,
            </if>
            <if test="memoryMax != null">
                MEMORY_MAX,
            </if>
            <if test="useCpuGhz != null">
                USE_CPU_GHZ,
            </if>
            <if test="useMemorySize != null">
                USE_MEMORY_SIZE,
            </if>
            <if test="allocateResHostSid != null">
                ALLOCATE_RES_HOST_SID,
            </if>
            <if test="managementAccount != null">
                MANAGEMENT_ACCOUNT,
            </if>
            <if test="managementPassword != null">
                MANAGEMENT_PASSWORD,
            </if>
            <if test="osVersion != null">
                OS_VERSION,
            </if>
            <if test="osName != null">
                OS_NAME,
            </if>
            <if test="secretKey != null">
                SECRET_KEY,
            </if>
            <if test="uuid != null">
                UUID,
            </if>
            <if test="zone != null">
                ZONE,
            </if>
            <if test="status != null">
                STATUS,
            </if>
            <if test="monitorNodeId != null">
                MONITOR_NODE_ID,
            </if>
            <if test="ownerId != null">
                OWNER_ID,
            </if>
            <if test="createdBy != null">
                CREATED_BY,
            </if>
            <if test="createdDt != null">
                CREATED_DT,
            </if>
            <if test="updatedBy != null">
                UPDATED_BY,
            </if>
            <if test="updatedDt != null">
                UPDATED_DT,
            </if>
            <if test="version != null">
                VERSION,
            </if>
            <if test="provisionStorage != null">
                PROVISION_SPACE,
            </if>
            <if test="useStoreSize != null">
                USE_STORE_SIZE,
            </if>
            <if test="powerCpuMaxUnits != null">
                POWER_CPU_MAX_UNITS,
            </if>
            <if test="powerCpuMinUnits != null">
                POWER_CPU_MIN_UNITS,
            </if>
            <if test="powerCpuUsedUnits != null">
                POWER_CPU_USED_UNITS,
            </if>
            <if test="resViosId != null">
                RES_VIOS_ID,
            </if>
            <if test="parId != null">
                PAR_ID,
            </if>
            <if test="parProfile != null">
                PAR_PROFILE,
            </if>
            <if test="parType != null">
                PAR_TYPE,
            </if>
            <if test="cpuCoresMax != null">
                CPU_CORES_MAX,
            </if>
            <if test="cpuCoresMin != null">
                CPU_CORES_MIN,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{resVmSid},
            <if test="vmName != null">
                #{vmName},
            </if>
            <if test="cpuCores != null">
                #{cpuCores},
            </if>
            <if test="memorySize != null">
                #{memorySize},
            </if>
            <if test="memoryMin != null">
                #{memoryMin},
            </if>
            <if test="memoryMax != null">
                #{memoryMax},
            </if>
            <if test="useCpuGhz != null">
                #{useCpuGhz},
            </if>
            <if test="useMemorySize != null">
                #{useMemorySize},
            </if>
            <if test="allocateResHostSid != null">
                #{allocateResHostSid},
            </if>
            <if test="managementAccount != null">
                #{managementAccount},
            </if>
            <if test="managementPassword != null">
                #{managementPassword},
            </if>
            <if test="osVersion != null">
                #{osVersion},
            </if>
            <if test="osName != null">
                #{osName},
            </if>
            <if test="secretKey != null">
                #{secretKey},
            </if>
            <if test="uuid != null">
                #{uuid},
            </if>
            <if test="zone != null">
                #{zone},
            </if>
            <if test="status != null">
                #{status},
            </if>
            <if test="monitorNodeId != null">
                #{monitorNodeId},
            </if>
            <if test="ownerId != null">
                #{ownerId},
            </if>
            <if test="createdBy != null">
                #{createdBy},
            </if>
            <if test="createdDt != null">
                #{createdDt},
            </if>
            <if test="updatedBy != null">
                #{updatedBy},
            </if>
            <if test="updatedDt != null">
                #{updatedDt},
            </if>
            <if test="version != null">
                #{version},
            </if>
            <if test="provisionStorage != null">
                #{provisionStorage},
            </if>
            <if test="useStoreSize != null">
                #{useStoreSize},
            </if>
            <if test="powerCpuMaxUnits != null">
                #{powerCpuMaxUnits},
            </if>
            <if test="powerCpuMinUnits != null">
                #{powerCpuMinUnits},
            </if>
            <if test="powerCpuUsedUnits != null">
                #{powerCpuUsedUnits},
            </if>
            <if test="resViosId != null">
                #{resViosId},
            </if>
            <if test="parId != null">
                #{parId},
            </if>
            <if test="parProfile != null">
                #{parProfile},
            </if>
            <if test="parType != null">
                #{parType},
            </if>
            <if test="cpuCoresMax != null">
                #{cpuCoresMax},
            </if>
            <if test="cpuCoresMin != null">
                #{cpuCoresMin},
            </if>
        </trim>
    </insert>
    <select id="countByParams" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria" resultType="java.lang.Integer">
        select COUNT(DISTINCT A.RES_VM_SID) from res_vm A
        <if test="condition.resTopologySid != null and condition.resTopologyType != 'HOST'">
            INNER JOIN (
            select
            H.RES_HOST_SID
            from res_host H
            where FIND_IN_SET(H.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{condition.resTopologySid}))
            ) B ON (B.RES_HOST_SID = A.ALLOCATE_RES_HOST_SID)
        </if>
        LEFT JOIN res_vm_network E ON(A.RES_VM_SID=E.RES_VM_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectByVmUUID" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        res_vm A
        WHERE A.uuid = #{uuid}
    </select>
    <update id="updateByParamsSelective" parameterType="map">
        update res_vm A
        <set>
            <if test="record.resVmSid != null">
                A.RES_VM_SID = #{record.resVmSid},
            </if>
            <if test="record.zone != null">
                A.ZONE = #{record.zone},
            </if>
            <if test="record.vmName != null">
                A.VM_NAME = #{record.vmName},
            </if>
            <if test="record.cpuCores != null">
                A.CPU_CORES = #{record.cpuCores},
            </if>
            <if test="record.memorySize != null">
                A.MEMORY_SIZE = #{record.memorySize},
            </if>
            <if test="record.allocateResHostSid != null">
                A.ALLOCATE_RES_HOST_SID = #{record.allocateResHostSid},
            </if>
            <if test="record.managementAccount != null">
                A.MANAGEMENT_ACCOUNT = #{record.managementAccount},
            </if>
            <if test="record.managementPassword != null">
                A.MANAGEMENT_PASSWORD = #{record.managementPassword},
            </if>
            <if test="record.osVersion != null">
                A.OS_VERSION = #{record.osVersion},
            </if>
            <if test="record.osName != null">
                A.OS_NAME = #{record.osName},
            </if>
            <if test="record.secretKey != null">
                A.SECRET_KEY = #{record.secretKey},
            </if>
            <if test="record.uuid != null">
                A.UUID = #{record.uuid},
            </if>
            <if test="record.status != null">
                A.STATUS = #{record.status},
            </if>
            <if test="record.monitorNodeId != null">
                A.MONITOR_NODE_ID = #{record.monitorNodeId},
            </if>
            <if test="record.ownerId != null">
                A.OWNER_ID = #{record.ownerId},
            </if>
            <if test="record.createdBy != null">
                A.CREATED_BY = #{record.createdBy},
            </if>
            <if test="record.createdDt != null">
                A.CREATED_DT = #{record.createdDt},
            </if>
            <if test="record.updatedBy != null">
                A.UPDATED_BY = #{record.updatedBy},
            </if>
            <if test="record.updatedDt != null">
                A.UPDATED_DT = #{record.updatedDt},
            </if>
            <if test="record.version != null">
                A.VERSION = #{record.version},
            </if>
            <if test="record.provisionStorage != null">
                A.PROVISION_SPACE=#{record.provisionStorage},
            </if>
            <if test="record.useStoreSize != null">
                A.USE_STORE_SIZE=#{record.useStoreSize},
            </if>
            <if test="record.powerCpuMaxUnits != null">
                A.POWER_CPU_MAX_UNITS=#{record.powerCpuMaxUnits},
            </if>
            <if test="record.powerCpuMinUnits != null">
                A.POWER_CPU_MIN_UNITS=#{record.powerCpuMinUnits},
            </if>
            <if test="record.powerCpuUsedUnits != null">
                A.POWER_CPU_USED_UNITS=#{record.powerCpuUsedUnits},
            </if>
            <if test="record.resViosId != null">
                A.RES_VIOS_ID=#{record.resViosId},
            </if>
            <if test="record.parId != null">
                A.PAR_ID=#{record.parId},
            </if>
            <if test="record.parProfile != null">
                A.PAR_PROFILE=#{record.parProfile},
            </if>
            <if test="parType != null">
                A.PAR_TYPE=#{parType},
            </if>
            <if test="cpuCoresMax != null">
                A.CPU_CORES_MAX=#{cpuCoresMax},
            </if>
            <if test="cpuCoresMin != null">
                A.CPU_CORES_MIN=#{cpuCoresMin},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByParams" parameterType="map">
        update res_vm
        set RES_VM_SID = #{record.resVmSid},
        VM_NAME = #{record.vmName},
        ZONE = #{record.zone},
        CPU_CORES = #{record.cpuCores},
        MEMORY_SIZE = #{record.memorySize},
        ALLOCATE_RES_HOST_SID = #{record.allocateResHostSid},
        MANAGEMENT_ACCOUNT = #{record.managementAccount},
        MANAGEMENT_PASSWORD = #{record.managementPassword},
        OS_VERSION = #{record.osVersion},
        SECRET_KEY = #{record.secretKey},
        UUID = #{record.uuid},
        STATUS = #{record.status},
        MONITOR_NODE_ID = #{record.monitorNodeId},
        OWNER_ID = #{record.ownerId},
        CREATED_BY = #{record.createdBy},
        CREATED_DT = #{record.createdDt},
        UPDATED_BY = #{record.updatedBy},
        UPDATED_DT = #{record.updatedDt},
        VERSION = #{record.version},
        PROVISION_SPACE=#{record.provisionStorage},
        USE_STORE_SIZE=#{record.useStoreSize},
        POWER_CPU_MAX_UNITS=#{record.powerCpuMaxUnits},
        POWER_CPU_MIN_UNITS=#{record.powerCpuMinUnits},
        POWER_CPU_USED_UNITS=#{record.powerCpuUsedUnits},
        RES_VIOS_ID=#{record.resViosId},
        PAR_ID=#{record.parId},
        PAR_PROFILE=#{record.parProfile},
        PAR_TYPE=#{parType},
        CPU_CORES_MAX=#{cpuCoresMax},
        CPU_CORES_MIN=#{cpuCoresMin}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResVm">
        update res_vm
        <set>
            <if test="vmName != null">
                VM_NAME = #{vmName},
            </if>
            <if test="zone != null">
                ZONE = #{zone},
            </if>
            <if test="cpuCores != null">
                CPU_CORES = #{cpuCores},
            </if>
            <if test="memorySize != null">
                MEMORY_SIZE = #{memorySize},
            </if>
            <if test="memoryMin != null">
                MEMORY_MIN = #{memoryMin},
            </if>
            <if test="memoryMax != null">
                MEMORY_MAX = #{memoryMax},
            </if>
            <if test="useCpuGhz != null">
                USE_CPU_GHZ = #{useCpuGhz},
            </if>
            <if test="useMemorySize != null">
                USE_MEMORY_SIZE = #{useMemorySize},
            </if>
            <if test="allocateResHostSid != null">
                ALLOCATE_RES_HOST_SID = #{allocateResHostSid},
            </if>
            <if test="managementAccount != null">
                MANAGEMENT_ACCOUNT = #{managementAccount},
            </if>
            <if test="managementPassword != null">
                MANAGEMENT_PASSWORD = #{managementPassword},
            </if>
            <if test="osVersion != null">
                OS_VERSION = #{osVersion},
            </if>
            <if test="osName != null">
                OS_NAME = #{osName},
            </if>
            <if test="secretKey != null">
                SECRET_KEY = #{secretKey},
            </if>
            <if test="uuid != null">
                UUID = #{uuid},
            </if>
            <if test="status != null">
                STATUS = #{status},
            </if>
            <if test="monitorNodeId != null">
                MONITOR_NODE_ID = #{monitorNodeId},
            </if>
            <if test="status != null">
                STATUS = #{status},
            </if>
            <if test="ownerId != null">
                OWNER_ID = #{ownerId},
            </if>
            <if test="createdBy != null">
                CREATED_BY = #{createdBy},
            </if>
            <if test="createdDt != null">
                CREATED_DT = #{createdDt},
            </if>
            <if test="updatedBy != null">
                UPDATED_BY = #{updatedBy},
            </if>
            <if test="updatedDt != null">
                UPDATED_DT = #{updatedDt},
            </if>
            <if test="version != null">
                VERSION = #{version},
            </if>
            <if test="provisionStorage != null">
                PROVISION_SPACE = #{provisionStorage},
            </if>
            <if test="useStoreSize != null">
                USE_STORE_SIZE = #{useStoreSize},
            </if>
            <if test="powerCpuMaxUnits != null">
                POWER_CPU_MAX_UNITS = #{powerCpuMaxUnits},
            </if>
            <if test="powerCpuMinUnits != null">
                POWER_CPU_MIN_UNITS = #{powerCpuMinUnits},
            </if>
            <if test="powerCpuUsedUnits != null">
                POWER_CPU_USED_UNITS = #{powerCpuUsedUnits},
            </if>
            <if test="resViosId != null">
                RES_VIOS_ID = #{resViosId},
            </if>
            <if test="parId != null">
                PAR_ID = #{parId},
            </if>
            <if test="parProfile != null">
                PAR_PROFILE = #{parProfile},
            </if>
            <if test="parType != null">
                PAR_TYPE=#{parType},
            </if>
            <if test="cpuCoresMax != null">
                CPU_CORES_MAX=#{cpuCoresMax},
            </if>
            <if test="cpuCoresMin != null">
                CPU_CORES_MIN=#{cpuCoresMin},
            </if>
        </set>
        where RES_VM_SID = #{resVmSid}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResVm">
        update res_vm
        set VM_NAME = #{vmName},
        CPU_CORES = #{cpuCores},
        MEMORY_SIZE = #{memorySize},
        ALLOCATE_RES_HOST_SID = #{allocateResHostSid},
        MANAGEMENT_ACCOUNT = #{managementAccount},
        MANAGEMENT_PASSWORD = #{managementPassword},
        OS_VERSION = #{osVersion},
        SECRET_KEY = #{secretKey},
        UUID = #{uuid},
        ZONE = #{zone},
        STATUS = #{status},
        MONITOR_NODE_ID = #{monitorNodeId},
        OWNER_ID = #{ownerId},
        CREATED_BY = #{createdBy},
        CREATED_DT = #{createdDt},
        UPDATED_BY = #{updatedBy},
        UPDATED_DT = #{updatedDt},
        VERSION = #{version},
        PROVISION_SPACE=#{provisionStorage},
        USE_STORE_SIZE=#{useStoreSize},
        POWER_CPU_MAX_UNITS=#{powerCpuMaxUnits},
        POWER_CPU_MIN_UNITS=#{powerCpuMinUnits},
        POWER_CPU_USED_UNITS=#{powerCpuUsedUnits},
        RES_VIOS_ID=#{resViosId},
        PAR_ID=#{parId},
        PAR_PROFILE=#{parProfile},
        PAR_TYPE=#{parType},
        CPU_CORES_MAX=#{cpuCoresMax},
        CPU_CORES_MIN=#{cpuCoresMin}
        where RES_VM_SID = #{resVmSid}
    </update>
</mapper>