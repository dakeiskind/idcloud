<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.h3c.idcloud.core.persist.res.dao.ResHostMapper">
    <resultMap id="BaseResultMap" type="com.h3c.idcloud.core.pojo.dto.res.ResHost">
        <id column="RES_HOST_SID" property="resHostSid" jdbcType="VARCHAR"/>
        <result column="RES_BIZ_SID" property="resBizSid" jdbcType="BIGINT"/>
        <result column="PARENT_TOPOLOGY_SID" property="parentTopologySid" jdbcType="VARCHAR"/>
        <result column="PARENT_TOPOLOGY_NAME" property="parentTopologyName" jdbcType="VARCHAR"/>
        <result column="MGT_OBJ_NAME" property="mgtObjName" jdbcType="VARCHAR"/>
        <result column="RES_POOL_SID" property="resPoolSid" jdbcType="VARCHAR"/>
        <result column="HOST_NAME" property="hostName" jdbcType="VARCHAR"/>
        <result column="CPU_NUMBER" property="cpuNumber" jdbcType="INTEGER"/>
        <result column="CPU_CORES" property="cpuCores" jdbcType="INTEGER"/>
        <result column="ZONE" property="zone" jdbcType="VARCHAR"/>

        <result column="CPU_TOTAL_CORES" property="cpuTotalCores" jdbcType="INTEGER"/>
        <result column="CPU_ALLOT_CORES" property="cpuAllotCores" jdbcType="INTEGER"/>
        <result column="CPU_ALLOT_RATE" property="cpuAllotRate" jdbcType="VARCHAR"/>

        <result column="STA_TOTAL_HOST" property="staTotalHost" jdbcType="INTEGER"/>
        <result column="STA_NORMAL_HOST" property="staNormalHost" jdbcType="INTEGER"/>
        <result column="STA_OFFINE_HOST" property="staOffineHost" jdbcType="INTEGER"/>
        <result column="STA_MAINTAIN_HOST" property="staMaintainHost" jdbcType="INTEGER"/>
        <result column="STA_FAULT_HOST" property="staFaultHost" jdbcType="INTEGER"/>

        <result column="CPU_GHZ" property="cpuGhz" jdbcType="DECIMAL"/>
        <result column="CPU_TYPE" property="cpuType" jdbcType="VARCHAR"/>
        <result column="MEMORY_SIZE" property="memorySize" jdbcType="BIGINT"/>
        <result column="MEMORY_SIZE_GB" property="memorySizeGb" jdbcType="VARCHAR"/>
        <result column="MEMORY_ALLOT_RATE" property="memoryAllotRate" jdbcType="VARCHAR"/>

        <result column="CPU_USAGE" property="cpuUsage" jdbcType="VARCHAR"/>
        <result column="MEMORY_USAGE" property="memoryUsage" jdbcType="VARCHAR"/>

        <result column="USE_CPU_GHZ" property="useCpuGhz" jdbcType="DECIMAL"/>
        <result column="USE_MEMORY_SIZE" property="useMemorySize" jdbcType="BIGINT"/>

        <result column="MEMORY_ALLOT_SIZE" property="memoryAllotSize" jdbcType="BIGINT"/>
        <result column="MEMORY_SUM" property="memoryNum" jdbcType="BIGINT"/>
        <result column="VM_COUNT" property="vmCount" jdbcType="BIGINT"/>

        <result column="NIC_NUMBER" property="nicNumber" jdbcType="INTEGER"/>
        <result column="HOST_IP" property="hostIp" jdbcType="VARCHAR"/>
        <result column="MANAGEMENT_IP" property="managementIp" jdbcType="VARCHAR"/>
        <result column="HOST_OS_TYPE" property="hostOsType" jdbcType="VARCHAR"/>
        <result column="HOST_OS_TYPE_NAME" property="hostOsTypeName" jdbcType="VARCHAR"/>
        <result column="EQUIP_HOST_OS_TYPE" property="equipHostOsType" jdbcType="VARCHAR"/>
        <result column="MANAGEMENT_USER" property="managementUser" jdbcType="VARCHAR"/>
        <result column="MANAGEMENT_PWD" property="managementPwd" jdbcType="VARCHAR"/>
        <result column="VENDOR" property="vendor" jdbcType="VARCHAR"/>
        <result column="MODEL" property="model" jdbcType="VARCHAR"/>
        <result column="SERIAL_NUMBER" property="serialNumber" jdbcType="VARCHAR"/>
        <result column="STATUS" property="status" jdbcType="VARCHAR"/>
        <result column="IS_VIOS_FLAG" property="isViosFlag" jdbcType="VARCHAR"/>
        <result column="STATUS_NAME" property="statusName" jdbcType="VARCHAR"/>
        <result column="UUID" property="uuid" jdbcType="VARCHAR"/>
        <result column="MONITOR_NODE_ID" property="monitorNodeId" jdbcType="VARCHAR"/>
        <result column="DEPLOY_NODE_ID" property="deployNodeId" jdbcType="VARCHAR"/>
        <result column="CREATED_BY" property="createdBy" jdbcType="VARCHAR"/>
        <result column="CREATED_DT" property="createdDt" jdbcType="TIMESTAMP"/>
        <result column="UPDATED_BY" property="updatedBy" jdbcType="VARCHAR"/>
        <result column="UPDATED_DT" property="updatedDt" jdbcType="TIMESTAMP"/>
        <result column="VERSION" property="version" jdbcType="BIGINT"/>

        <result column="TOTAL_CAPACITY" property="totalCapacity" jdbcType="BIGINT"/>
        <result column="HOST_CPU_USAGE" property="hostCpuUsage" jdbcType="VARCHAR"/>
        <result column="HOST_MEMORY_USAGE" property="hostMemoryUsage" jdbcType="VARCHAR"/>

        <result column="HOST_VE" property="hostVe" jdbcType="VARCHAR"/>

        <result column="CPU_AVAILABLE" property="cpuAvailable" jdbcType="DECIMAL"/>
        <result column="MEMORY_AVAILABLE" property="memoryAvailable" jdbcType="BIGINT"/>

        <result column="RES_POOL_NAME" property="resPoolName" jdbcType="VARCHAR"/>
        <result column="VIRTUAL_IO_SERVER_CAPABLE" property="virtualIoServerCapable" jdbcType="VARCHAR"/>
        <!-- 主机物理属性 -->
        <!--  <result column="HOST_PHYSICAL_LOCATION" property="hostPhysicalLocation" jdbcType="VARCHAR" />
         <result column="EQUIP_CABINET_FRAME_SID" property="equipCabinetFrameSid" jdbcType="BIGINT" />
         <result column="CABINET_FRAME_NAME" property="cabinetFrameName" jdbcType="VARCHAR" />
         <result column="EQUIP_CABINET_SID" property="equipCabinetSid" jdbcType="BIGINT" />
         <result column="CABINET_NAME" property="cabinetName" jdbcType="VARCHAR" /> -->
        <result column="EQUIP_ROOM_SID" property="equipRoomSid" jdbcType="VARCHAR"/>
        <result column="EQUIP_CABINET_SID" property="equipCabinetSid" jdbcType="VARCHAR"/>
        <result column="EQUIP_RACK_SID" property="equipRackSid" jdbcType="VARCHAR"/>
        <result column="CABINET_FRAME_NAME" property="cabinetFrameName" jdbcType="VARCHAR"/>
        <result column="EQUIP_CATEGORY" jdbcType="VARCHAR" property="equipCategory"/>
        <result column="EQUIP_TYPE" jdbcType="VARCHAR" property="equipType"/>
        <result column="LOCATION_NUMBER" jdbcType="VARCHAR" property="locationNumber"/>
        <result column="NAME" jdbcType="VARCHAR" property="name"/>
        <result column="HOST_SERIAL_NUMBER" jdbcType="VARCHAR" property="phySerialNumber"/>
        <result column="BRAND" jdbcType="VARCHAR" property="brand"/>
        <result column="MODEL" jdbcType="VARCHAR" property="phyModel"/>
        <result column="REMOTE_MGT_IP1" jdbcType="VARCHAR" property="remoteMgtIp1"/>
        <result column="REMOTE_MGT_IP2" jdbcType="VARCHAR" property="remoteMgtIp2"/>
        <result column="REMOTE_MGT_USER" jdbcType="VARCHAR" property="remoteMgtUser"/>
        <result column="REMOTE_MGT_PWD" jdbcType="VARCHAR" property="remoteMgtPwd"/>
        <result column="RELEVANCE_IP" jdbcType="VARCHAR" property="relevanceIp"/>
        <result column="CABINET_NAME" jdbcType="VARCHAR" property="cabinetName"/>
        <result column="ROOM_NAME" jdbcType="VARCHAR" property="roomName"/>
        <result column="RACK_NAME" jdbcType="VARCHAR" property="rackName"/>

        <result column="MGT_OBJ_SID" property="mgtObjSid" jdbcType="BIGINT"/>

        <result column="HOST_EQUIP_TYPE" property="hostEquipType" jdbcType="VARCHAR"/>
        <result column="EQUIP_CATEGORY_NAME" property="equipCategoryName" jdbcType="VARCHAR"/>
        <result column="VIOS_USER" property="viosUser" jdbcType="VARCHAR"/>
        <result column="VIOS_PASSWORD" property="viosPassWord" jdbcType="VARCHAR"/>
        <result column="STA_TOTAL_SERVER" property="staTotalServer" jdbcType="BIGINT"/>

        <result column="MAINT_COMPANY" property="maintCompany" jdbcType="VARCHAR"/>
        <result column="MAINT_TEL" property="maintTel" jdbcType="VARCHAR"/>
        <result column="PURCHASE_DATE" property="purchaseDate" jdbcType="TIMESTAMP"/>
        <result column="WARRANTY_PERIOD" property="warrantyPeriod" jdbcType="BIGINT"/>
        <result column="EQUIP_SUPPLIER" property="equipSupplier" jdbcType="VARCHAR"/>
        <result column="START_END_DATE" property="startEndDate" jdbcType="TIMESTAMP"/>

    </resultMap>
    <sql id="Example_Where_Clause">
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.resHostSid != null">
                and A.RES_HOST_SID = #{condition.resHostSid}
            </if>
            <if test="condition.parentTopologySid != null">
                and A.PARENT_TOPOLOGY_SID = #{condition.parentTopologySid}
            </if>
            <if test="condition.zone != null">
                and A.ZONE = #{condition.zone}
            </if>
            <if test="condition.equipRoomSid != null">
                and A.EQUIP_ROOM_SID = #{condition.equipRoomSid}
            </if>
            <if test="condition.equipCabinetSid != null">
                and A.EQUIP_CABINET_SID = #{condition.equipCabinetSid}
            </if>
            <if test="condition.equipRackSid != null">
                and A.EQUIP_RACK_SID = #{condition.equipRackSid}
            </if>
            <if test="condition.resPoolSid != null">
                and A.RES_POOL_SID = #{condition.resPoolSid}
            </if>
            <if test="condition.hostName != null">
                and A.HOST_NAME = #{condition.hostName}
            </if>
            <if test="condition.hostNameLike != null">
                and A.HOST_NAME like concat('%', #{condition.hostNameLike},'%')
            </if>
            <if test="condition.hostEquipNameLike != null">
                and E4.NAME like concat('%', #{condition.hostEquipNameLike},'%')
            </if>
            <if test="condition.bizNameLike != null">
                and BIZ.MGT_OBJ_NAME like concat('%', #{condition.bizNameLike},'%')
            </if>
            <if test="condition.cpuNumber != null">
                and A.CPU_NUMBER = #{condition.cpuNumber}
            </if>
            <if test="condition.cpuCores != null">
                and A.CPU_CORES = #{condition.cpuCores}
            </if>
            <if test="condition.cpuGhz != null">
                and A.CPU_GHZ = #{condition.cpuGhz}
            </if>
            <if test="condition.cpuType != null">
                and A.CPU_TYPE = #{condition.cpuType}
            </if>
            <if test="condition.memorySize != null">
                and A.MEMORY_SIZE = #{condition.memorySize}
            </if>
            <if test="condition.nicNumber != null">
                and A.NIC_NUMBER = #{condition.nicNumber}
            </if>
            <if test="condition.hostIp != null">
                and A.HOST_IP = #{condition.hostIp}
            </if>
            <if test="condition.hostIpLike != null">
                and A.HOST_IP like concat('%', #{condition.hostIpLike},'%')
            </if>
            <if test="condition.vmIpLike != null">
                and D.IP_ADDRESS like concat('%', #{condition.vmIpLike},'%')
            </if>
            <if test="condition.managementIp != null">
                and A.MANAGEMENT_IP = #{condition.managementIp}
            </if>
            <if test="condition.hostOsType != null">
                and A.HOST_OS_TYPE like concat('%', #{condition.hostOsType},'%')
            </if>
            <if test="condition.vendor != null">
                and A.VENDOR = #{condition.vendor}
            </if>
            <if test="condition.model != null">
                and A.MODEL = #{condition.model}
            </if>
            <if test="condition.serialNumber != null">
                and A.SERIAL_NUMBER = #{condition.serialNumber}
            </if>
            <if test="condition.status != null">
                and A.STATUS = #{condition.status}
            </if>
            <if test="condition.statusNotIn != null">
                and A.STATUS NOT IN (${condition.statusNotIn})
            </if>
            <if test="condition.uuid != null">
                and A.UUID = #{condition.uuid}
            </if>
            <if test="condition.monitorNodeId != null">
                and A.MONITOR_NODE_ID = #{condition.monitorNodeId}
            </if>
            <if test="condition.deployNodeId != null">
                and A.DEPLOY_NODE_ID = #{condition.deployNodeId}
            </if>
            <if test="condition.createdBy != null">
                and A.CREATED_BY = #{condition.createdBy}
            </if>
            <if test="condition.createdDt != null">
                and A.CREATED_DT = #{condition.createdDt}
            </if>
            <if test="condition.updatedBy != null">
                and A.UPDATED_BY = #{condition.updatedBy}
            </if>
            <if test="condition.updatedDt != null">
                and A.UPDATED_DT = #{condition.updatedDt}
            </if>
            <if test="condition.version != null">
                and A.VERSION = #{condition.version}
            </if>
            <if test="condition.resPcTopologySid != null">
                and TOPO.RES_TOPOLOGY_SID = #{condition.resPcTopologySid}
            </if>
            <if test="condition.ownerVc != null">
                and RTY.RES_TOPOLOGY_NAME LIKE concat('%', #{condition.ownerVc},'%')
            </if>
            <if test="condition.isNullResPoolSid != null">
                and (A.RES_POOL_SID is null or A.RES_POOL_SID = '')
            </if>
            <if test="condition.mgtObjSid != null">
                <!--          AND (MO.MGT_OBJ_SID = #{condition.mgtObjSid} OR MO.PARENT_ID = #{condition.mgtObjSid}) -->
                AND FIND_IN_SET(MO.MGT_OBJ_SID, getResBizChildList(#{condition.mgtObjSid}))
            </if>
            <if test="condition.isViosFlag != null">
                and A.IS_VIOS_FLAG = #{condition.isViosFlag}
            </if>
            <if test="condition.relationNetworkSid != null">
                and A.RES_HOST_SID not in (SELECT N.RES_HOST_SID FROM res_network_host N where N.RES_NETWORK_SID =
                #{condition.relationNetworkSid} )
            </if>
            <if test="condition.resHostTopologyType != null">
                and (VE1.VIRTUAL_PLATFORM_TYPE in (${condition.resHostTopologyType}) or VE2.VIRTUAL_PLATFORM_TYPE in
                (${condition.resHostTopologyType}))
            </if>
            <if test="condition.mgtObjHostRel != null">
                and A.RES_HOST_SID NOT IN (SELECT SIR.RES_ID FROM service_inst_res SIR WHERE SIR.RES_TYPE='RES-HOST')
                AND A.RES_HOST_SID NOT IN (SELECT MR.RES_SET_SID FROM sys_m_mgt_obj_res MR WHERE MR.RES_SET_TYPE
                ='RES-HOST')
            </if>
            <if test="condition.findChildBySid != null">
                and FIND_IN_SET(A.PARENT_TOPOLOGY_SID,getResTopologyChildList(#{condition.findChildBySid}))
            </if>
            <if test="condition.resHostNetworkSid != null">
                and B.RES_NETWORK_SID = #{condition.resHostNetworkSid}
            </if>
            <if test="condition.parentVeTopologySid != null">
                and (A.PARENT_TOPOLOGY_SID = #{condition.parentVeTopologySid} or C.PARENT_TOPOLOGY_SID =
                #{condition.parentVeTopologySid})
            </if>

            <if test="condition.resTopologySid != null">
                and FIND_IN_SET(A.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{condition.resTopologySid}))
            </if>

            <if test="condition.resBizSid != null">
                and FIND_IN_SET(BIZ.MGT_OBJ_SID,getResBizChildList(#{condition.resBizSid}))
            </if>
            <if test="condition.serialNumberLike != null">
                and E4.SERIAL_NUMBER like concat('%', #{condition.serialNumberLike},'%')
            </if>
            <!--       <if test="condition.resStatisticsBizSid != null" > -->
            <!--          and FIND_IN_SET(BIZ.BIZ_SID,getResBizChildList(#{condition.resStatisticsBizSid})) -->
            <!--       </if> -->
        </trim>
    </sql>
    <sql id="Base_Column_List">
        A.RES_HOST_SID, A.PARENT_TOPOLOGY_SID, A.RES_POOL_SID, A.HOST_NAME, A.CPU_NUMBER, A.CPU_CORES,
        A.CPU_GHZ, A.CPU_TYPE, A.MEMORY_SIZE, A.NIC_NUMBER, A.HOST_IP, A.MANAGEMENT_IP, A.HOST_OS_TYPE, A.CPU_AVAILABLE,
        A.MEMORY_AVAILABLE,A.ZONE,
        A.VENDOR,A.MANAGEMENT_USER,A.MANAGEMENT_PWD, A.MODEL, A.SERIAL_NUMBER, A.STATUS,A.IS_VIOS_FLAG, A.UUID,
        A.MONITOR_NODE_ID, A.DEPLOY_NODE_ID,
        A.CREATED_BY, A.CREATED_DT, A.UPDATED_BY, A.UPDATED_DT,
        A.VERSION,A.USE_MEMORY_SIZE,A.USE_CPU_GHZ,A.VIRTUAL_IO_SERVER_CAPABLE,
        A.EQUIP_ROOM_SID,A.EQUIP_CABINET_SID,A.EQUIP_RACK_SID
    </sql>
    <select id="selectByParams" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        <!--<if test="condition.resTopologySid != null" >-->
        <!--call getResTopologyChildList(#{condition.resTopologySid});-->
        <!--</if>-->
        select
        <if test="distinct">
            distinct
        </if>
        B.RES_TOPOLOGY_NAME as PARENT_TOPOLOGY_NAME,
        C.CODE_DISPLAY AS STATUS_NAME,
        IFNULL(F.CODE_DISPLAY , A.HOST_OS_TYPE ) as HOST_OS_TYPE_NAME,
        F.PARENT_CODE_VALUE AS HOST_EQUIP_TYPE,
        G.RES_TOPOLOGY_NAME AS RES_POOL_NAME,
        COUNT(DISTINCT D.RES_VM_SID) as VM_COUNT,
        MO.MGT_OBJ_SID AS MGT_OBJ_SID,
        MO.NAME AS MGT_OBJ_NAME,
        ROUND((A.MEMORY_SIZE/1024) , 2) as MEMORY_SIZE_GB,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
        CONCAT(ROUND(IFNULL(A.USE_CPU_GHZ/(A.CPU_CORES*A.CPU_GHZ)*100,0),2),'%') AS HOST_CPU_USAGE,
        CONCAT(ROUND(IFNULL(A.USE_MEMORY_SIZE / A.MEMORY_SIZE * 100,0),2),'%') AS HOST_MEMORY_USAGE,
        <!-- K.CODE_DISPLAY AS EQUIP_HOST_OS_TYPE, -->
        VI.`USER` AS VIOS_USER,
        VI.`PASSWORD` AS VIOS_PASSWORD,
        E4.EQUIP_SID, E4.EQUIP_CATEGORY, E4.EQUIP_TYPE, E4.LOCATION_NUMBER, E4.NAME, E4.SERIAL_NUMBER AS
        HOST_SERIAL_NUMBER, E4.BRAND,
        E4.MODEL AS PHYMODEL, E4.REMOTE_MGT_IP1, E4.REMOTE_MGT_IP2, E4.REMOTE_MGT_USER, E4.REMOTE_MGT_PWD,
        E4.MAINT_COMPANY,
        E4.MAINT_TEL, E4.PURCHASE_DATE, E4.WARRANTY_PERIOD, E4.EQUIP_SUPPLIER, E4.SPEC, E4.DESCRIPTION,
        E4.START_END_DATE,E4.RELEVANCE_IP,
        E1.`NAME` AS CABINET_NAME,
        E2.`NAME` AS ROOM_NAME,
        E3.`NAME` AS RACK_NAME,
        L.CODE_DISPLAY AS CABINET_FRAME_NAME,
        L.CODE_DISPLAY AS EQUIP_CATEGORY_NAME,
        if(VE1.VIRTUAL_PLATFORM_TYPE is NULL,VE2.VIRTUAL_PLATFORM_TYPE,VE1.VIRTUAL_PLATFORM_TYPE) AS HOST_VE,
        <include refid="Base_Column_List"/>
        from res_host A
        LEFT JOIN res_topology B ON (A.PARENT_TOPOLOGY_SID = B.RES_TOPOLOGY_SID)
        LEFT JOIN res_ve VE1 on (B.RES_TOPOLOGY_SID = VE1.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology J on (B.PARENT_TOPOLOGY_SID = J.RES_TOPOLOGY_SID)
        LEFT JOIN res_ve VE2 on (J.RES_TOPOLOGY_SID = VE2.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology G ON (A.RES_POOL_SID = G.RES_TOPOLOGY_SID)
        LEFT JOIN sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        LEFT JOIN sys_m_code F on (A.HOST_OS_TYPE=F.CODE_VALUE AND F.CODE_CATEGORY='OS_VERSION')
        LEFT JOIN res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        LEFT JOIN res_equip_cabinet E1 ON (A.EQUIP_CABINET_SID = E1.EQUIP_SID)
        LEFT JOIN res_equip_room E2 ON (A.EQUIP_ROOM_SID = E2.EQUIP_ROOM_SID)
        LEFT JOIN res_equip_rack E3 ON (A.EQUIP_RACK_SID = E3.EQUIP_SID)
        LEFT JOIN res_equip_info E4 ON (A.RES_HOST_SID = E4.EQUIP_SID)
        LEFT JOIN service_inst_res SIR ON (A.RES_HOST_SID = SIR.RES_ID AND SIR.RES_TYPE="RES-HOST")
        LEFT JOIN service_instance SI ON (SI.INSTANCE_SID = SIR.INSTANCE_SID)
        LEFT JOIN sys_m_mgt_obj MO ON (SI.MGT_OBJ_SID = MO.MGT_OBJ_SID)
        LEFT JOIN res_vios VI ON (VI.RES_HOST_SID = A.RES_HOST_SID )
        LEFT JOIN sys_m_code L on (E4.EQUIP_CATEGORY=L.CODE_VALUE AND L.CODE_CATEGORY='EQUIP_CATEGORY')
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_HOST_SID
        <!-- orderby 在分页查询中太慢了，先拿掉 -->
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>
    <select id="selectByParamsForScan" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        res_host A
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY
        A.RES_HOST_SID
    </select>
    <select id="selectResHostByParams" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        <include refid="Base_Column_List"/>
        from res_host A
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>

    <select id="countByHostUUID" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM
        res_host A
        WHERE
        A.uuid = #{uuid}

    </select>

    <select id="selectHostResSumByRel" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria"
            resultMap="BaseResultMap">
        SELECT SUM(A.CPU_CORES) AS CPU_CORES,SUM(A.CPU_NUMBER) AS CPU_NUMBER ,ROUND(SUM(A.MEMORY_SIZE)/1024,2) AS
        MEMORY_SIZE,
        ROUND(SUM(A.CPU_NUMBER-IFNULL(A.CPU_AVAILABLE,"0")),1) AS CPU_AVAILABLE,
        ROUND(SUM(A.MEMORY_SIZE-IFNULL(A.MEMORY_AVAILABLE,"0"))/1024,2) AS MEMORY_AVAILABLE,
        if(VE1.VIRTUAL_PLATFORM_TYPE is NULL,VE2.VIRTUAL_PLATFORM_TYPE,VE1.VIRTUAL_PLATFORM_TYPE) AS HOST_VE
        FROM `res_host` A
        LEFT JOIN res_topology B ON (A.PARENT_TOPOLOGY_SID = B.RES_TOPOLOGY_SID)
        LEFT JOIN res_ve VE1 on (B.RES_TOPOLOGY_SID = VE1.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology J on (B.PARENT_TOPOLOGY_SID = J.RES_TOPOLOGY_SID)
        LEFT JOIN res_ve VE2 on (J.RES_TOPOLOGY_SID = VE2.RES_TOPOLOGY_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY HOST_VE
    </select>

    <select id="countByEquipType" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria"
            resultMap="BaseResultMap">
        select B.EQUIP_CATEGORY,C.CODE_DISPLAY AS EQUIP_CATEGORY_NAME,F.PARENT_CODE_VALUE AS HOST_EQUIP_TYPE,COUNT(*) AS
        STA_TOTAL_HOST
        from res_host A
        INNER JOIN res_equip_info B ON (A.RES_HOST_SID = B.EQUIP_SID)
        LEFT JOIN sys_m_code C ON (B.EQUIP_CATEGORY = C.CODE_VALUE AND C.CODE_CATEGORY ="EQUIP_CATEGORY")
        left join sys_m_code F on (A.HOST_OS_TYPE=F.CODE_VALUE AND F.CODE_CATEGORY='OS_VERSION')
        GROUP BY F.PARENT_CODE_VALUE,B.EQUIP_CATEGORY
    </select>

    <select id="selectByBizParams" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">

        select
            B.RES_TOPOLOGY_NAME as PARENT_TOPOLOGY_NAME,
            C.CODE_DISPLAY AS STATUS_NAME,
            COUNT(D.RES_VM_SID) as VM_COUNT,
            ROUND((A.MEMORY_SIZE/1024) , 2) as MEMORY_SIZE_GB,
            GROUP_CONCAT(DISTINCT BIZ.MGT_OBJ_NAME) as MGT_OBJ_NAME,
            SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
            SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
            CONCAT(ROUND(IFNULL(A.USE_CPU_GHZ/(A.CPU_CORES*A.CPU_GHZ)*100,0),2),'%') AS HOST_CPU_USAGE,
            CONCAT(ROUND(IFNULL(A.USE_MEMORY_SIZE / A.MEMORY_SIZE * 100,0),2),'%') AS HOST_MEMORY_USAGE,
        <include refid="Base_Column_List"/>
        from
          view_sys_biz_res_host BIZ
        INNER JOIN res_host A ON (BIZ.RES_SID = A.RES_HOST_SID)
        left join res_topology B ON (A.PARENT_TOPOLOGY_SID = B.RES_TOPOLOGY_SID)
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        left join res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)

        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_HOST_SID
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <select id="statisticalTopologyOfHost" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        COUNT(A.RES_HOST_SID) as STA_TOTAL_HOST,
        sum(IF(A.`STATUS` = '01',1,0)) as STA_NORMAL_HOST,
        sum(IF(A.`STATUS` = '02',1,0)) as STA_OFFINE_HOST,
        sum(IF(A.`STATUS` = '03',1,0)) as STA_MAINTAIN_HOST,
        sum(IF(A.`STATUS` = '04' or A.`STATUS` is null,1,0)) as STA_FAULT_HOST
        from res_host A
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <select id="statisticalStoragePoolOfHost" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        COUNT(A.RES_HOST_SID) as STA_TOTAL_HOST,
        sum(IF(A.`STATUS` = '01',1,0)) as STA_NORMAL_HOST,
        sum(IF(A.`STATUS` = '02',1,0)) as STA_OFFINE_HOST,
        sum(IF(A.`STATUS` = '03',1,0)) as STA_MAINTAIN_HOST,
        sum(IF(A.`STATUS` = '04',1,0)) as STA_FAULT_HOST
        from res_host A
        INNER JOIN (
        SELECT
        DISTINCT
        B.RES_HOST_SID
        FROM
        res_storage A
        INNER JOIN res_host_storage B ON (A.RES_STORAGE_SID = B.RES_STORAGE_SID)
        WHERE A.RES_POOL_SID = #{resPoolSid}
        ) B ON (A.RES_HOST_SID = B.RES_HOST_SID)

    </select>

    <select id="statisticalBizOfHost" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">

        select
        COUNT(A.RES_HOST_SID) as STA_TOTAL_HOST,
        sum(IF(A.`STATUS` = '01',1,0)) as STA_NORMAL_HOST,
        sum(IF(A.`STATUS` = '02',1,0)) as STA_OFFINE_HOST,
        sum(IF(A.`STATUS` = '03',1,0)) as STA_MAINTAIN_HOST,
        sum(IF(A.`STATUS` = '04',1,0)) as STA_FAULT_HOST,
        SUM(A.CPU_CORES) as CPU_CORES,
        ROUND(SUM(A.MEMORY_SIZE)/1024,2) as MEMORY_SIZE
        from
        (
        SELECT
        H.RES_HOST_SID as RES_HOST_SID,
        H.`STATUS` as STATUS,
        H.CPU_CORES as CPU_CORES,
        H.MEMORY_SIZE as MEMORY_SIZE,
        BIZ.MGT_OBJ_SID AS MGT_OBJ_SID
        FROM
        res_host H
        INNER JOIN view_sys_biz_res_host BIZ ON (H.RES_HOST_SID = BIZ.RES_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY H.RES_HOST_SID
        ) A

    </select>

    <!-- 计算资源池下 -->
    <select id="statisticalComputePoolOfHost" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        COUNT(A.RES_HOST_SID) as STA_TOTAL_HOST,
        sum(IF(A.`STATUS` = '01',1,0)) as STA_NORMAL_HOST,
        sum(IF(A.`STATUS` = '02',1,0)) as STA_OFFINE_HOST,
        sum(IF(A.`STATUS` = '03',1,0)) as STA_MAINTAIN_HOST,
        sum(IF(A.`STATUS` = '04',1,0)) as STA_FAULT_HOST,
        SUM(A.CPU_CORES) as CPU_CORES,
        ROUND(SUM(A.MEMORY_SIZE)/1024,2) as MEMORY_SIZE
        FROM
        res_host A

        WHERE A.RES_POOL_SID = #{resPoolSid}

    </select>

    <select id="selectHostInPool" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        C.CODE_DISPLAY AS STATUS_NAME,
        (A.CPU_CORES) AS CPU_TOTAL_CORES,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from res_host A
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        left join res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <select id="selectCountHostRes" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        '' AS STATUS_NAME,
        '' AS CPU_ALLOT_CORES,
        '' AS MEMORY_ALLOT_SIZE,
        SUM(A.CPU_CORES) AS CPU_TOTAL_CORES,
        SUM(A.MEMORY_SIZE) AS MEMORY_SUM,
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        FROM res_host A
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        UNION
        select
        C.CODE_DISPLAY AS STATUS_NAME,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
        '' AS CPU_TOTAL_CORES,
        '' AS MEMORY_SUM,
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from res_host A
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        left join res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <!-- 统计资源拓扑结构下的主机cpu、内存信息 -->
    <select id="statisticalTopologyOfHostAllotInfo" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        sum(A.CPU_CORES) as CPU_TOTAL_CORES,
        ROUND(SUM(A.MEMORY_SIZE)/1024,2) as MEMORY_SIZE,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        ROUND(SUM(D.MEMORY_SIZE)/1024,2) as MEMORY_ALLOT_SIZE,
        ROUND(SUM(D.CPU_CORES)/sum(A.CPU_CORES)*100,2) as CPU_ALLOT_RATE,
        ROUND(SUM(D.MEMORY_SIZE)/SUM(A.MEMORY_SIZE)*100,2) as MEMORY_ALLOT_RATE
        FROM res_host A
        LEFT JOIN(
        SELECT
        SUM(VM.CPU_CORES) as CPU_CORES,
        SUM(VM.MEMORY_SIZE) as MEMORY_SIZE,
        VM.ALLOCATE_RES_HOST_SID
        FROM
        res_vm VM
        GROUP BY VM.ALLOCATE_RES_HOST_SID
        )D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        WHERE FIND_IN_SET(A.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{resTopologySid}))
    </select>

    <!-- 统计资源拓扑结构下的主机cpu、内存信息 -->
    <select id="statisticalTopologyOfPowerHostAllotInfo" resultMap="BaseResultMap" parameterType="java.lang.String">
        SELECT
        sum(A.CPU_NUMBER) as CPU_TOTAL_CORES,
        ROUND(SUM(A.MEMORY_SIZE)/1024,2) as MEMORY_SIZE,
        SUM(A.CPU_NUMBER-IFNULL(A.CPU_AVAILABLE,"0")) as CPU_ALLOT_CORES,
        ROUND(sum(A.MEMORY_SIZE - A.MEMORY_AVAILABLE)/1024,2) as MEMORY_ALLOT_SIZE,
        ROUND(SUM(A.CPU_NUMBER-IFNULL(A.CPU_AVAILABLE,"0"))/sum(A.CPU_NUMBER)*100,2) as CPU_ALLOT_RATE,
        ROUND(sum(A.MEMORY_SIZE - A.MEMORY_AVAILABLE)/SUM(A.MEMORY_SIZE)*100,2) as MEMORY_ALLOT_RATE
        FROM res_host A
        WHERE FIND_IN_SET(A.PARENT_TOPOLOGY_SID, getResTopologyChildList(#{resTopologySid}))
    </select>

    <!-- 统计资源分区的主机cpu、内存信息 -->
    <select id="statisticalRzOfHostAllotInfo" resultMap="BaseResultMap" parameterType="java.lang.String">

        SELECT
        sum(A.CPU_CORES) as CPU_TOTAL_CORES,
        ROUND(SUM(A.MEMORY_SIZE)/1024,2) as MEMORY_SIZE,
        SUM(C.CPU_CORES) as CPU_ALLOT_CORES,
        ROUND(SUM(C.MEMORY_SIZE)/1024,2) as MEMORY_ALLOT_SIZE
        FROM res_host A

        LEFT JOIN res_topology B ON (A.RES_POOL_SID = B.RES_TOPOLOGY_SID)
        LEFT JOIN (
        SELECT
        VM.ALLOCATE_RES_HOST_SID,
        sum(VM.CPU_CORES) as CPU_CORES,
        sum(VM.MEMORY_SIZE) as MEMORY_SIZE
        FROM res_vm VM
        GROUP BY VM.ALLOCATE_RES_HOST_SID
        ) C ON (A.RES_HOST_SID = C.ALLOCATE_RES_HOST_SID)
        where B.RES_TOPOLOGY_TYPE in ('PCVX','PCX','PCVP','PCP') and B.PARENT_TOPOLOGY_SID = #{resTopologySid}

    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        C.CODE_DISPLAY AS STATUS_NAME,
        (A.CPU_CORES) AS CPU_TOTAL_CORES,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
        IFNULL(E.CODE_DISPLAY , A.HOST_OS_TYPE ) as HOST_OS_TYPE_NAME,
        E.PARENT_CODE_VALUE AS HOST_EQUIP_TYPE,

        F.MAINT_COMPANY as MAINT_COMPANY,
        F.MAINT_TEL as MAINT_TEL,
        F.PURCHASE_DATE as PURCHASE_DATE,
        F.WARRANTY_PERIOD as WARRANTY_PERIOD,
        F.EQUIP_SUPPLIER as EQUIP_SUPPLIER,
        F.START_END_DATE as START_END_DATE,
        <include refid="Base_Column_List"/>
        from res_host A
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        left join res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        left join sys_m_code E on (A.HOST_OS_TYPE=E.CODE_VALUE AND E.CODE_CATEGORY='OS_VERSION')
        LEFT JOIN res_equip_info F ON (A.RES_HOST_SID = F.EQUIP_SID)
        where A.RES_HOST_SID = #{resHostSid}
    </select>
    <select id="selectPrimaryKeyByUUID" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        C.CODE_DISPLAY AS STATUS_NAME,
        (A.CPU_CORES) AS CPU_TOTAL_CORES,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
        <include refid="Base_Column_List"/>
        from res_host A
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        left join res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        where A.UUID = #{condition.uuid}
    </select>
    <select id="selectByResVcSid" resultMap="BaseResultMap" parameterType="java.lang.String">
        select
        <include refid="Base_Column_List"/>
        from res_host A
        where A.PARENT_TOPOLOGY_SID = #{parentTopologySid}
    </select>

    <select id="selectResByTopology" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT SUM(T.CPU_CORES) as CPU_CORES , SUM(T.MEMORY_SIZE) as MEMORY_SIZE , SUM(T.TOTAL_CAPACITY) as
        TOTAL_CAPACITY
        from (
        select (A.CPU_CORES* A.CPU_NUMBER) as CPU_CORES , A.MEMORY_SIZE,SUM(C.TOTAL_CAPACITY) as TOTAL_CAPACITY
        from res_host A
        LEFT JOIN res_host_storage B on A.RES_HOST_SID = B.RES_HOST_SID
        LEFT JOIN res_storage C on C.RES_STORAGE_SID = B.RES_STORAGE_SID
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.parentTopologySid != null">
                and A.PARENT_TOPOLOGY_SID = #{condition.parentTopologySid}
            </if>
            <if test="condition.resPoolSid != null">
                and A.RES_HOST_SID = #{condition.resHostSid}
            </if>
        </trim>
        GROUP BY A.RES_HOST_SID
        ) T
    </select>

    <select id="selectHostResSum" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select SUM(A.CPU_CORES* A.CPU_NUMBER) as CPU_CORES , SUM(A.MEMORY_SIZE) as MEMORY_SIZE
        from res_host A
        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.parentTopologySid != null">
                and A.PARENT_TOPOLOGY_SID = #{condition.parentTopologySid}
            </if>
            <if test="condition.resPoolSid != null">
                and A.RES_HOST_SID = #{condition.resHostSid}
            </if>
        </trim>
    </select>

    <select id="selectHostByStorageSid" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        <include refid="Base_Column_List"/>
        ,C.CODE_DISPLAY AS STATUS_NAME
        ,ROUND((A.MEMORY_SIZE/1024) , 2) as MEMORY_SIZE_GB,
        <!--     SUM(D.CPU_CORES) as CPU_ALLOT_CORES, -->
        <!-- 	SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE, -->
        CONCAT(ROUND(IFNULL(A.USE_CPU_GHZ/(A.CPU_CORES*A.CPU_GHZ)*100,0),2),'%') AS HOST_CPU_USAGE,
        CONCAT(ROUND(IFNULL(A.USE_MEMORY_SIZE / A.MEMORY_SIZE * 100,0),2),'%') AS HOST_MEMORY_USAGE
        FROM
        res_host A
        INNER JOIN res_host_storage B ON (A.RES_HOST_SID = B.RES_HOST_SID)
        left join sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')

        <trim prefix="where" prefixOverrides="and|or">
            <if test="condition.parentTopologySid != null">
                and A.PARENT_TOPOLOGY_SID = #{condition.parentTopologySid}
            </if>
            <if test="condition.resStorageSid != null">
                and B.RES_STORAGE_SID = #{condition.resStorageSid}
            </if>
        </trim>


    </select>
    <select id="findHostAddToStorage" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        ,B.CODE_DISPLAY AS STATUS_NAME
        from res_host A
        LEFT JOIN sys_m_code B ON(A.STATUS=B.CODE_VALUE AND B.CODE_CATEGORY='HOST_STATUS')
        LEFT JOIN res_vm C ON (A.RES_HOST_SID = C.ALLOCATE_RES_HOST_SID)
        LEFT JOIN res_vm_network D ON (C.RES_VM_SID = D.RES_VM_SID)

        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_HOST_SID
    </select>
    <!-- 查询网络管理的主机 -->
    <select id="selectRelationedHostByNetworkSid" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        DISTINCT
        <include refid="Base_Column_List"/>,
        GROUP_CONCAT(E.RES_TOPOLOGY_NAME,'/',D.RES_TOPOLOGY_NAME,'/',C.RES_TOPOLOGY_NAME) as PARENT_TOPOLOGY_NAME
        FROM
        res_host A
        INNER JOIN res_network_host B on (A.RES_HOST_SID = B.RES_HOST_SID)
        LEFT JOIN res_topology C on (A.PARENT_TOPOLOGY_SID = C.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology D on (C.PARENT_TOPOLOGY_SID = D.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology E on (D.PARENT_TOPOLOGY_SID = E.RES_TOPOLOGY_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>

        GROUP BY A.RES_HOST_SID

    </select>
    <!-- 查询网络可以关联的主机 -->
    <select id="selectRelationHostByNetworkSid" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        select
        DISTINCT
        <include refid="Base_Column_List"/>,
        GROUP_CONCAT(E.RES_TOPOLOGY_NAME,'/',D.RES_TOPOLOGY_NAME,'/',C.RES_TOPOLOGY_NAME) as PARENT_TOPOLOGY_NAME
        FROM
        res_host A
        LEFT JOIN res_topology C on (A.PARENT_TOPOLOGY_SID = C.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology D on (C.PARENT_TOPOLOGY_SID = D.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology E on (D.PARENT_TOPOLOGY_SID = E.RES_TOPOLOGY_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_HOST_SID
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
        delete from res_host
        where RES_HOST_SID = #{resHostSid}
    </delete>

    <delete id="deleteHostWithObjRes" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        delete A,B from res_host AS A
        JOIN sys_m_mgt_obj_res AS B ON A.RES_HOST_SID=B.RES_SET_SID
        where A.RES_HOST_SID = #{condition.resHostSid}
    </delete>

    <delete id="deleteByParams" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        delete from res_host
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResHost">
        <selectKey resultType="java.lang.String" keyProperty="resHostSid" order="BEFORE">
            select UUID()
        </selectKey>
        insert into res_host (RES_HOST_SID, PARENT_TOPOLOGY_SID, RES_POOL_SID, HOST_NAME, CPU_NUMBER,
        CPU_CORES, CPU_GHZ, CPU_TYPE, MEMORY_SIZE, NIC_NUMBER, HOST_IP, MANAGEMENT_IP,
        HOST_OS_TYPE, VENDOR, MODEL, SERIAL_NUMBER, STATUS, UUID, ZONE,
        MONITOR_NODE_ID, DEPLOY_NODE_ID,VIRTUAL_IO_SERVER_CAPABLE, CREATED_BY, CREATED_DT, UPDATED_BY, UPDATED_DT,
        VERSION, EQUIP_ROOM_SID, EQUIP_CABINET_SID, EQUIP_RACK_SID)
        values (#{resHostSid}, #{parentTopologySid}, #{resPoolSid}, #{hostName}, #{cpuNumber},
        #{cpuCores}, #{cpuGhz}, #{cpuType}, #{memorySize}, #{nicNumber}, #{hostIp}, #{managementIp},
        #{hostOsType}, #{vendor}, #{model}, #{serialNumber}, #{status}, #{uuid}, #{zone}
        #{monitorNodeId}, #{deployNodeId},#{virtualIoServerCapable}, #{createdBy}, #{createdDt}, #{updatedBy},
        #{updatedDt},
        #{version}, #{equipRoomSid}, #{equipCabinetSid}, #{equipRackSid})
    </insert>
    <insert id="insertSelective" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResHost">
        <selectKey resultType="java.lang.String" keyProperty="resHostSid" order="BEFORE">
            select UUID()
        </selectKey>
        insert into res_host
        <trim prefix="(" suffix=")" suffixOverrides=",">
            RES_HOST_SID,
            <if test="parentTopologySid != null">
                PARENT_TOPOLOGY_SID,
            </if>
            <if test="resPoolSid != null">
                RES_POOL_SID,
            </if>
            <if test="hostName != null">
                HOST_NAME,
            </if>
            <if test="cpuNumber != null">
                CPU_NUMBER,
            </if>
            <if test="cpuCores != null">
                CPU_CORES,
            </if>
            <if test="cpuGhz != null">
                CPU_GHZ,
            </if>
            <if test="useCpuGhz != null">
                USE_CPU_GHZ,
            </if>
            <if test="useMemorySize != null">
                USE_MEMORY_SIZE,
            </if>
            <if test="cpuType != null">
                CPU_TYPE,
            </if>
            <if test="cpuAvailable != null">
                CPU_AVAILABLE,
            </if>
            <if test="memoryAvailable != null">
                MEMORY_AVAILABLE,
            </if>
            <if test="memorySize != null">
                MEMORY_SIZE,
            </if>
            <if test="nicNumber != null">
                NIC_NUMBER,
            </if>
            <if test="hostIp != null">
                HOST_IP,
            </if>
            <if test="managementIp != null">
                MANAGEMENT_IP,
            </if>
            <if test="hostOsType != null">
                HOST_OS_TYPE,
            </if>
            <if test="vendor != null">
                VENDOR,
            </if>
            <if test="managementUser != null">
                MANAGEMENT_USER,
            </if>
            <if test="managementPwd != null">
                MANAGEMENT_PWD,
            </if>
            <if test="model != null">
                MODEL,
            </if>
            <if test="serialNumber != null">
                SERIAL_NUMBER,
            </if>
            <if test="isViosFlag != null">
                IS_VIOS_FLAG,
            </if>
            <if test="status != null">
                STATUS,
            </if>
            <if test="uuid != null">
                UUID,
            </if>
            <if test="zone != null">
                ZONE,
            </if>
            <if test="monitorNodeId != null">
                MONITOR_NODE_ID,
            </if>
            <if test="deployNodeId != null">
                DEPLOY_NODE_ID,
            </if>
            <if test="virtualIoServerCapable != null">
                VIRTUAL_IO_SERVER_CAPABLE,
            </if>
            <if test="equipRoomSid != null">
                EQUIP_ROOM_SID,
            </if>
            <if test="equipCabinetSid != null">
                EQUIP_CABINET_SID,
            </if>
            <if test="equipRackSid != null">
                EQUIP_RACK_SID,
            </if>
            <if test="createdBy != null">
                CREATED_BY,
            </if>
            <if test="createdDt != null">
                CREATED_DT,
            </if>
            <if test="updatedBy != null">
                UPDATED_BY,
            </if>
            <if test="updatedDt != null">
                UPDATED_DT,
            </if>
            <if test="version != null">
                VERSION,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            #{resHostSid},
            <if test="parentTopologySid != null">
                #{parentTopologySid},
            </if>
            <if test="resPoolSid != null">
                #{resPoolSid},
            </if>
            <if test="hostName != null">
                #{hostName},
            </if>
            <if test="cpuNumber != null">
                #{cpuNumber},
            </if>
            <if test="cpuCores != null">
                #{cpuCores},
            </if>
            <if test="cpuGhz != null">
                #{cpuGhz},
            </if>
            <if test="useCpuGhz != null">
                #{useCpuGhz},
            </if>
            <if test="useMemorySize != null">
                #{useMemorySize},
            </if>
            <if test="cpuType != null">
                #{cpuType},
            </if>
            <if test="cpuAvailable != null">
                #{cpuAvailable},
            </if>
            <if test="memoryAvailable != null">
                #{memoryAvailable},
            </if>
            <if test="memorySize != null">
                #{memorySize},
            </if>
            <if test="nicNumber != null">
                #{nicNumber},
            </if>
            <if test="hostIp != null">
                #{hostIp},
            </if>
            <if test="managementIp != null">
                #{managementIp},
            </if>
            <if test="hostOsType != null">
                #{hostOsType},
            </if>
            <if test="vendor != null">
                #{vendor},
            </if>
            <if test="managementUser != null">
                #{managementUser},
            </if>
            <if test="managementPwd != null">
                #{managementPwd},
            </if>
            <if test="model != null">
                #{model},
            </if>
            <if test="serialNumber != null">
                #{serialNumber},
            </if>
            <if test="isViosFlag != null">
                #{isViosFlag},
            </if>
            <if test="status != null">
                #{status},
            </if>
            <if test="uuid != null">
                #{uuid},
            </if>
            <if test="zone != null">
                #{zone},
            </if>
            <if test="monitorNodeId != null">
                #{monitorNodeId},
            </if>
            <if test="deployNodeId != null">
                #{deployNodeId},
            </if>
            <if test="virtualIoServerCapable != null">
                #{virtualIoServerCapable},
            </if>
            <if test="equipRoomSid != null">
                #{equipRoomSid},
            </if>
            <if test="equipCabinetSid != null">
                #{equipCabinetSid},
            </if>
            <if test="equipRackSid != null">
                #{equipRackSid},
            </if>
            <if test="createdBy != null">
                #{createdBy},
            </if>
            <if test="createdDt != null">
                #{createdDt},
            </if>
            <if test="updatedBy != null">
                #{updatedBy},
            </if>
            <if test="updatedDt != null">
                #{updatedDt},
            </if>
            <if test="version != null">
                #{version},
            </if>
        </trim>
    </insert>
    <select id="countByBizParams" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria"
            resultType="java.lang.Integer">

        select
        COUNT(DISTINCT A.RES_HOST_SID)
        from
        view_sys_biz_res_host BIZ
        INNER JOIN res_host A ON (BIZ.RES_SID = A.RES_HOST_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="countByParams" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria"
            resultType="java.lang.Integer">

        select count(*) from res_host A
        LEFT JOIN res_equip_info E4 ON (A.RES_HOST_SID = E4.EQUIP_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByParamsSelective" parameterType="map">
        update res_host A
        <set>
            <if test="record.resHostSid != null">
                A.RES_HOST_SID = #{record.resHostSid},
            </if>
            <if test="record.parentTopologySid != null">
                A.PARENT_TOPOLOGY_SID = #{record.parentTopologySid},
            </if>
            <if test="record.zone != null">
                A.ZONE = #{record.zone},
            </if>
            <if test="record.resPoolSid != null">
                A.RES_POOL_SID = #{record.resPoolSid},
            </if>
            <if test="record.hostName != null">
                A.HOST_NAME = #{record.hostName},
            </if>
            <if test="record.cpuNumber != null">
                A.CPU_NUMBER = #{record.cpuNumber},
            </if>
            <if test="record.cpuCores != null">
                A.CPU_CORES = #{record.cpuCores},
            </if>
            <if test="record.cpuGhz != null">
                A.CPU_GHZ = #{record.cpuGhz},
            </if>
            <if test="record.cpuType != null">
                A.CPU_TYPE = #{record.cpuType},
            </if>
            <if test="record.cpuAvailable != null">
                A.CPU_AVAILABLE = #{record.cpuAvailable},
            </if>
            <if test="record.memoryAvailable != null">
                A.MEMORY_AVAILABLE = #{record.memoryAvailable},
            </if>
            <if test="record.memorySize != null">
                A.MEMORY_SIZE = #{record.memorySize},
            </if>
            <if test="record.nicNumber != null">
                A.NIC_NUMBER = #{record.nicNumber},
            </if>
            <if test="record.hostIp != null">
                A.HOST_IP = #{record.hostIp},
            </if>
            <if test="record.managementIp != null">
                A.MANAGEMENT_IP = #{record.managementIp},
            </if>
            <if test="record.hostOsType != null">
                A.HOST_OS_TYPE = #{record.hostOsType},
            </if>
            <if test="record.vendor != null">
                A.VENDOR = #{record.vendor},
            </if>
            <if test="record.managementUser != null">
                A.MANAGEMENT_USER = #{record.managementUser},
            </if>
            <if test="record.managementPwd != null">
                A.MANAGEMENT_PWD = #{record.managementPwd},
            </if>
            <if test="record.model != null">
                A.MODEL = #{record.model},
            </if>
            <if test="record.serialNumber != null">
                A.SERIAL_NUMBER = #{record.serialNumber},
            </if>
            <if test="record.isViosFlag != null">
                A.IS_VIOS_FLAG = #{record.isViosFlag},
            </if>
            <if test="record.status != null">
                A.STATUS = #{record.status},
            </if>
            <if test="record.uuid != null">
                A.UUID = #{record.uuid},
            </if>
            <if test="record.monitorNodeId != null">
                MONITOR_NODE_ID = #{record.monitorNodeId},
            </if>
            <if test="record.deployNodeId != null">
                A.DEPLOY_NODE_ID = #{record.deployNodeId},
            </if>
            <if test="record.virtualIoServerCapable != null">
                A.VIRTUAL_IO_SERVER_CAPABLE = #{record.virtualIoServerCapable},
            </if>
            <if test="record.equipRoomSid != null">
                A.EQUIP_ROOM_SID = #{record.equipRoomSid},
            </if>
            <if test="record.equipCabinetSid != null">
                A.EQUIP_CABINET_SID = #{record.equipCabinetSid},
            </if>
            <if test="record.equipRackSid != null">
                A.EQUIP_RACK_SID = #{record.equipRackSid},
            </if>
            <if test="record.createdBy != null">
                A.CREATED_BY = #{record.createdBy},
            </if>
            <if test="record.createdDt != null">
                A.CREATED_DT = #{record.createdDt},
            </if>
            <if test="record.updatedBy != null">
                A.UPDATED_BY = #{record.updatedBy},
            </if>
            <if test="record.updatedDt != null">
                A.UPDATED_DT = #{record.updatedDt},
            </if>
            <if test="record.version != null">
                A.VERSION = #{record.version},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByParams" parameterType="map">
        update res_host
        set RES_HOST_SID = #{record.resHostSid},
        PARENT_TOPOLOGY_SID = #{record.parentTopologySid},
        ZONE = #{record.zone},
        RES_POOL_SID = #{record.resPoolSid},
        HOST_NAME = #{record.hostName},
        CPU_NUMBER = #{record.cpuNumber},
        CPU_CORES = #{record.cpuCores},
        CPU_GHZ = #{record.cpuGhz},
        CPU_TYPE = #{record.cpuType},
        MEMORY_SIZE = #{record.memorySize},
        NIC_NUMBER = #{record.nicNumber},
        HOST_IP = #{record.hostIp},
        MANAGEMENT_IP = #{record.managementIp},
        HOST_OS_TYPE = #{record.hostOsType},
        VENDOR = #{record.vendor},
        MODEL = #{record.model},
        SERIAL_NUMBER = #{record.serialNumber},
        STATUS = #{record.status},
        UUID = #{record.uuid},
        MONITOR_NODE_ID = #{record.monitorNodeId},
        DEPLOY_NODE_ID = #{record.deployNodeId},
        VIRTUAL_IO_SERVER_CAPABLE = #{record.virtualIoServerCapable},
        EQUIP_ROOM_SID = #{record.equipRoomSid},
        EQUIP_CABINET_SID = #{record.equipCabinetSid},
        EQUIP_RACK_SID = #{record.equipRackSid},
        CREATED_BY = #{record.createdBy},
        CREATED_DT = #{record.createdDt},
        UPDATED_BY = #{record.updatedBy},
        UPDATED_DT = #{record.updatedDt},
        VERSION = #{record.version}
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResHost">
        update res_host
        <set>
            <if test="parentTopologySid != null">
                PARENT_TOPOLOGY_SID = #{parentTopologySid},
            </if>
            <if test="resPoolSid != null">
                RES_POOL_SID = #{resPoolSid},
            </if>
            <if test="zone != null">
                ZONE = #{zone},
            </if>
            <if test="resPoolSid == ''">
                RES_POOL_SID = '',
            </if>
            <if test="hostName != null">
                HOST_NAME = #{hostName},
            </if>
            <if test="cpuNumber != null">
                CPU_NUMBER = #{cpuNumber},
            </if>
            <if test="cpuCores != null">
                CPU_CORES = #{cpuCores},
            </if>
            <if test="cpuGhz != null">
                CPU_GHZ = #{cpuGhz},
            </if>
            <if test="useCpuGhz != null">
                USE_CPU_GHZ = #{useCpuGhz},
            </if>
            <if test="useMemorySize != null">
                USE_MEMORY_SIZE = #{useMemorySize},
            </if>
            <if test="cpuType != null">
                CPU_TYPE = #{cpuType},
            </if>
            <if test="cpuAvailable != null">
                CPU_AVAILABLE = #{cpuAvailable},
            </if>
            <if test="memoryAvailable != null">
                MEMORY_AVAILABLE = #{memoryAvailable},
            </if>
            <if test="memorySize != null">
                MEMORY_SIZE = #{memorySize},
            </if>
            <if test="nicNumber != null">
                NIC_NUMBER = #{nicNumber},
            </if>
            <if test="hostIp != null">
                HOST_IP = #{hostIp},
            </if>
            <if test="managementIp != null">
                MANAGEMENT_IP = #{managementIp},
            </if>
            <if test="hostOsType != null">
                HOST_OS_TYPE = #{hostOsType},
            </if>
            <if test="vendor != null">
                VENDOR = #{vendor},
            </if>
            <if test="managementUser != null">
                MANAGEMENT_USER = #{managementUser},
            </if>
            <if test="managementPwd != null">
                MANAGEMENT_PWD = #{managementPwd},
            </if>
            <if test="model != null">
                MODEL = #{model},
            </if>
            <if test="serialNumber != null">
                SERIAL_NUMBER = #{serialNumber},
            </if>
            <if test="isViosFlag != null">
                IS_VIOS_FLAG = #{isViosFlag},
            </if>
            <if test="status != null">
                STATUS = #{status},
            </if>
            <if test="uuid != null">
                UUID = #{uuid},
            </if>
            <if test="monitorNodeId != null">
                MONITOR_NODE_ID = #{monitorNodeId},
            </if>
            <if test="deployNodeId != null">
                DEPLOY_NODE_ID = #{deployNodeId},
            </if>
            <if test="virtualIoServerCapable != null">
                VIRTUAL_IO_SERVER_CAPABLE = #{virtualIoServerCapable},
            </if>
            <if test="equipRoomSid != null">
                EQUIP_ROOM_SID = #{equipRoomSid},
            </if>
            <if test="equipCabinetSid != null">
                EQUIP_CABINET_SID = #{equipCabinetSid},
            </if>
            <if test="equipRackSid != null">
                EQUIP_RACK_SID = #{equipRackSid},
            </if>
            <if test="createdBy != null">
                CREATED_BY = #{createdBy},
            </if>
            <if test="createdDt != null">
                CREATED_DT = #{createdDt},
            </if>
            <if test="updatedBy != null">
                UPDATED_BY = #{updatedBy},
            </if>
            <if test="updatedDt != null">
                UPDATED_DT = #{updatedDt},
            </if>
            <if test="version != null">
                VERSION = #{version},
            </if>
        </set>
        where RES_HOST_SID = #{resHostSid}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.h3c.idcloud.core.pojo.dto.res.ResHost">
        update res_host
        set PARENT_TOPOLOGY_SID = #{parentTopologySid},
        RES_POOL_SID = #{resPoolSid},
        ZONE = #{zone},
        HOST_NAME = #{hostName},
        CPU_NUMBER = #{cpuNumber},
        CPU_CORES = #{cpuCores},
        CPU_GHZ = #{cpuGhz},
        CPU_TYPE = #{cpuType},
        CPU_AVAILABLE = #{cpuAvailable},
        MEMORY_AVAILABLE = #{memoryAvailable},
        MEMORY_SIZE = #{memorySize},
        NIC_NUMBER = #{nicNumber},
        HOST_IP = #{hostIp},
        MANAGEMENT_IP = #{managementIp},
        HOST_OS_TYPE = #{hostOsType},
        VENDOR = #{vendor},
        MANAGEMENT_USER = #{managementUser},
        MANAGEMENT_PWD = #{managementPwd},
        MODEL = #{model},
        SERIAL_NUMBER = #{serialNumber},
        IS_VIOS_FLAG = #{isViosFlag},
        STATUS = #{status},
        UUID = #{uuid},
        MONITOR_NODE_ID = #{monitorNodeId},
        DEPLOY_NODE_ID = #{deployNodeId},
        VIRTUAL_IO_SERVER_CAPABLE = #{virtualIoServerCapable},
        EQUIP_ROOM_SID = #{equipRoomSid},
        EQUIP_CABINET_SID = #{equipCabinetSid},
        EQUIP_RACK_SID = #{equipRackSid},
        CREATED_BY = #{createdBy},
        CREATED_DT = #{createdDt},
        UPDATED_BY = #{updatedBy},
        UPDATED_DT = #{updatedDt},
        VERSION = #{version}
        where RES_HOST_SID = #{resHostSid}
    </update>
    <select id="statisticalHostPoolOfRz" resultMap="BaseResultMap"
            parameterType="java.lang.String">
        SELECT
            COUNT(A.RES_HOST_SID) as STA_TOTAL_HOST,
            sum(IF(A.`STATUS` = '01',1,0)) as STA_NORMAL_HOST,
            sum(IF(A.`STATUS` = '02',1,0)) as STA_OFFINE_HOST,
            sum(IF(A.`STATUS` = '03',1,0)) as STA_MAINTAIN_HOST,
            sum(IF(A.`STATUS` = '04',1,0)) as STA_FAULT_HOST
            FROM res_host A
            INNER JOIN res_topology B ON (A.RES_POOL_SID = B.RES_TOPOLOGY_SID)
        where B.RES_TOPOLOGY_TYPE in ('PCVX','PCX','PCVP','PCP') and B.PARENT_TOPOLOGY_SID = #{resTopologySid}
    </select>

    <select id="selectHostByPcTopologySid" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        C.CODE_DISPLAY AS STATUS_NAME,
        COUNT(D.RES_VM_SID) as VM_COUNT,
        ROUND((A.MEMORY_SIZE/1024) , 2) as MEMORY_SIZE_GB,
        SUM(D.CPU_CORES) as CPU_ALLOT_CORES,
        SUM(D.MEMORY_SIZE) as MEMORY_ALLOT_SIZE,
        RTY.RES_TOPOLOGY_NAME as PARENT_TOPOLOGY_NAME,
        CONCAT(ROUND(SUM(D.CPU_CORES)/A.CPU_CORES*100,2),'%') as CPU_ALLOT_RATE,
        CONCAT(ROUND(SUM(D.MEMORY_SIZE)/A.MEMORY_SIZE*100,2),'%') as MEMORY_ALLOT_RATE,
        CONCAT(ROUND(IFNULL(A.USE_CPU_GHZ/(A.CPU_CORES*A.CPU_GHZ)*100,0),2),'%') AS HOST_CPU_USAGE,
        CONCAT(ROUND(IFNULL(A.USE_MEMORY_SIZE / A.MEMORY_SIZE * 100,0),2),'%') AS HOST_MEMORY_USAGE,
        <include refid="Base_Column_List"/>
        FROM res_host A
        INNER JOIN res_vc VC ON (A.PARENT_TOPOLOGY_SID = VC.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology RTY ON (RTY.RES_TOPOLOGY_SID = VC.RES_TOPOLOGY_SID)
        INNER JOIN res_topology TOPO ON (VC.RES_POOL_SID = TOPO.RES_TOPOLOGY_SID)
        LEFT JOIN sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        LEFT JOIN res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        GROUP BY A.RES_HOST_SID
        <include refid="common.Mysql_Pagination_Limit"/>
    </select>

    <select id="countByInPcParams" parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria"
            resultType="java.lang.Integer">
        SELECT
        COUNT(DISTINCT A.RES_HOST_SID)
        FROM res_host A
        INNER JOIN res_vc VC ON (A.PARENT_TOPOLOGY_SID = VC.RES_TOPOLOGY_SID)
        LEFT JOIN res_topology RTY ON (RTY.RES_TOPOLOGY_SID = VC.RES_TOPOLOGY_SID)
        INNER JOIN res_topology TOPO ON (VC.RES_POOL_SID = TOPO.RES_TOPOLOGY_SID)
        LEFT JOIN sys_m_code C on (A.STATUS=C.CODE_VALUE AND C.CODE_CATEGORY='HOST_STATUS')
        LEFT JOIN res_vm D ON (A.RES_HOST_SID = D.ALLOCATE_RES_HOST_SID)
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <select id="selectHostViosCnt" parameterType="string" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        , COUNT(V.RES_HOST_SID) AS VM_COUNT
        FROM
        RES_HOST A
        LEFT OUTER JOIN RES_VIOS V ON A.RES_HOST_SID = V.RES_HOST_SID
        WHERE
        A.PARENT_TOPOLOGY_SID = #{topologySid}
        GROUP BY
        A.RES_HOST_SID
    </select>

    <select id="statisticalTopologyOfServer" resultMap="BaseResultMap"
            parameterType="com.h3c.idcloud.infrastructure.common.pojo.Criteria">
        SELECT
        COUNT(A.RES_HOST_SID) AS STA_TOTAL_SERVER
        FROM
        RES_HOST A
        where FIND_IN_SET(A.PARENT_TOPOLOGY_SID,getResTopologyChildList(#{condition.resTopologySid}))
    </select>

</mapper>